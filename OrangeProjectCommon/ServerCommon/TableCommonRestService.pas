unit TableCommonRestService;

// =========================================================================
// kbmMW - An advanced and extendable middleware framework.
// by Components4Developers (http://www.components4developers.com)
//
// Service generated by kbmMW service wizard.
//
// INSTRUCTIONS FOR REGISTRATION/USAGE
// -----------------------------------
// Please update the uses clause of the datamodule/form the TkbmMWServer is placed on by adding services unit name 
// to it. Eg.
//
//     uses ...,kbmMWServer,YourServiceUnitName;
// 
// Somewhere in your application, make sure to register the serviceclass to the TkbmMWServer instance.
// This can be done by registering the traditional way, or by using auto registration.
// 
// Traditional registration
// ------------------------
// var
//    sd:TkbmMWCustomServiceDefinition;
// ..
//    sd:=kbmMWServer1.RegisterService(yourserviceclassname,false);
// 
// Set the last parameter to true if this is the default service.
// 
// 
// Auto registration
// -----------------
// Make sure that your service class is tagged with the [kbmMW_Service] attribute.
// Then auto register all tagged services:
// ..
//    kbmMWServer1.AutoRegisterServices;
// 
// -----------------------------------------------


{$IFDEF USE_IDHTTPSERVERMODE}
{$ELSE}
{$I kbmMW.inc}
{$ENDIF}


interface

uses
  SysUtils,
{$ifdef LEVEL6}
  Variants,
{$else}
  Forms,
{$endif}
  Classes,
  DateUtils,


  IniFiles,
  XSuperObject,
  XSuperJson,

//  Forms,
  XMLDoc,
  XMLIntf,
//  ActiveX,

  ZLib,

//  uThumbCommon,
//  uDateCommon,
//  uCaptcha,
//  uCommonUtils,
  uDataSetToJson,
  uBaseDBHelper,
  uUniDBHelper,
  uFuncCommon,
//  uLang,

  uRestInterfaceCall,
  System.NetEncoding,
//  Redis.Commons,
//  Redis.Client,

//  uOpenCommon,

  uTableCommonRestCenter,

  {$IFDEF USE_IDHTTPSERVERMODE}
  {$ELSE}

  uOpenPlatformServerManager,
  kbmMWHTTPStdTransStream,
  kbmMWCustomHTTPSmartService,

  kbmMWSecurity,
  kbmMWServer,
  kbmMWServiceUtils,
  kbmMWGlobal,
  kbmMWCustomSmartService
   ,kbmMWRTTI
   ,kbmMWSmartServiceUtils,
  {$ENDIF}

 Math;


type
  {$IFDEF USE_IDHTTPSERVERMODE}
  TkbmMWCustomHTTPSmartService=TObject;
  TkbmMWHTTPTransportStreamHelper=TObject;
  TkbmMWClientIdentity=TObject;
  TKbmMWServiceModule=TObject;
  {$ELSE}
  {$ENDIF}

  //是否可以添加记录的事件
  TCanAddRecordEvent=function(Sender:TObject;
                              const AAppID:String;const
                              AUserFID: String;
                              const AKey,
                              ARestName: String;
                              const ARemoteLocation: String;
                              ARecordDataJson:ISuperObject;
                              var ACode:Integer;
                              var ADesc:String):Boolean of object;


  [kbmMW_Service('name:tablecommonrest, flags:[listed]')]
  [kbmMW_Rest('path:/tablecommonrest')]
  // Access to the service can be limited using the [kbmMW_Auth..] attribute.
  // [kbmMW_Auth('role:[SomeRole,SomeOtherRole], grant:true')]

  TsrvTableCommonRestService = class(TkbmMWCustomHTTPSmartService)
    procedure kbmMWCustomHTTPSmartServiceCORS(Sender: TObject;
      const ARequestHelper, AResponseHelper: TkbmMWHTTPTransportStreamHelper;
      const AOrigin: string; var AAllowedOrigins, AAllowedMethods,
      AAllowedHeaders: string);

     { Private declarations }
  protected
     { Protected declarations }
  public
     { Public declarations }
     // HelloWorld function callable from both a regular client,
     // due to the optional [kbmMW_Method] attribute,
     // and from a REST client due to the optional [kbmMW_Rest] attribute.
     // The access path to the function from a REST client (like a browser)+
     // is in this case relative to the services path.
     // In this example: http://.../xalionservice/helloworld
     // Access to the function can be limited using the [kbmMW_Auth..] attribute.
     // [kbmMW_Auth('role:[SomeRole,SomeOtherRole], grant:true')]

     //http://127.0.0.1:9000/easyservice/helloworld
     //http://127.0.0.1:9000/easyservice/echostring/abc
     //http://127.0.0.1:9000/easyservice/cal/addnumbers?arg1=1&arg2=2
     //http://127.0.0.1:9000/easyservice/send_register_captcha?phone=18957901025
     //http://127.0.0.1:9000/easyservice/register_user?appid=1001&phone=18957901025&captcha=2721&name=ggggcexx&password=123456&repassword=123456


     //加了[kbmMW_Method]属性的方法才会被访问到
     //[kbmMW_Rest].method表示访问所使用的方法
     //[kbmMW_Rest].path表示访问的路径,可以有别名
     [kbmMW_Rest('method:get, path:helloworld')]
     [kbmMW_Method]
     function HelloWorld:String;


     //回应输入的串
     [kbmMW_Method('EchoString')]
     [kbmMW_Rest('method:get, path: [ "echostring/{AString}","myechostring/{AString}" ]')]
     [kbmMW_Auth('role:[SomeRole,SomeOtherRole], grant:true')]
     function EchoString([kbmMW_Rest('value: "{AString}"')] const AString:String):String;


     [kbmMW_Method]
     [kbmMW_Rest('method:get, path: "cal/addnumbers"')]
     function AddNumbers([kbmMW_Rest('value: "$arg1", required: false')] const AValue1:Integer;
                         [kbmMW_Rest('value: "$arg2", required: false')] const AValue2:Integer;
                         [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):Integer;

    public

      {$REGION '记录'}
      //添加记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "add_record"')]
      function AddRecord([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //添加记录
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "add_record_post"')]
      function AddRecordPost([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$body", required: false')] const ARecordDataJson:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //添加记录3
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "add_record_post_2"')]
      function AddRecordPost2([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //添加记录
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "add_record_post_3"')]
      function AddRecordPost3([kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;


      //添加记录列表
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "add_record_list_post"')]
      function AddRecordListPost([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$body", required: false')] const ARecordDataJsonArrayStr:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;


      //添加记录列表
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "add_record_list_post_2"')]
      function AddRecordListPost2([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;


      //修改记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "update_record"')]
      function UpdateRecord([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                 [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                 [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "update_record_post"')]
      function UpdateRecordPost([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                 [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "update_record_post_2"')]
      function UpdateRecordPost2([kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                 [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;


      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "update_record_post_3"')]
      function update_record_post_3([kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;


      //修改记录列表
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "update_record_list"')]
      function UpdateRecordList([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$record_data_json_array", required: false')] const ARecordDataJsonArray:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;



      //保存记录,添加或者修改
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "save_record_post"')]
      function save_record_post([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 //判断是否存在这条记录的字段
                 [kbmMW_Rest('value: "$check_exist_field_names", required: false')] const check_exist_field_names:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "save_record_list_post"')]
      function save_record_list_post([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$check_exist_field_names", required: false')] const check_exist_field_names:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;



      //删除记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "del_record"')]
      function DelRecord([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                 [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //删除记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "del_record2"')]
      function del_record2([kbmMW_Rest('value: "$appid", required: false')] AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                 [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                  //主键值
                  [kbmMW_Rest('value: "$fid", required: false')] const fid:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //删除记录列表
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "del_record_list"')]
      function DelRecordList([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$where_json_array", required: false')] const AWhereJsonArray:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "del_record_list2"')]
      function del_record_list2([kbmMW_Rest('value: "$appid", required: false')] AAppID:String;
                 [kbmMW_Rest('value: "$user_fid", required: false')] AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                 [kbmMW_Rest('value: "$where_json_array", required: false')] const AWhereJsonArray:String;
                  //主键值
                  [kbmMW_Rest('value: "$fid_json_array", required: false')] const fid_json_array:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //获取记录列表
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "get_record_list"')]
      function GetRecordList([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$pageindex", required: false')] const APageIndex:Integer;
                [kbmMW_Rest('value: "$pagesize", required: false')] const APageSize:Integer;
                [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                [kbmMW_Rest('value: "$order_by", required: false')] const AOrderBy:String;
                [kbmMW_Rest('value: "$is_need_return_level", required: false')] const AIsNeedReturnLevel:String;
                [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                [kbmMW_Rest('value: "$is_need_sub_query_list", required: false')] const AIsNeedSubQueryList:String;
                [kbmMW_Rest('value: "$is_need_sum_count", required: false')] const is_need_sum_count:String;
                [kbmMW_Rest('value: "$is_need_record_list", required: false')] const is_need_record_list:String;
//                [kbmMW_Rest('value: "$params_json", required: false')] const params_json:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "get_record_list_post"')]
      function get_record_list_post(
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //获取用户的记录列表
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "get_user_record_list"')]
      function get_user_record_list([kbmMW_Rest('value: "$appid", required: false')] AAppID:String;
                [kbmMW_Rest('value: "$user_fid", required: false')] AUserFID:String;
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$pageindex", required: false')] const APageIndex:Integer;
                [kbmMW_Rest('value: "$pagesize", required: false')] const APageSize:Integer;
                [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                [kbmMW_Rest('value: "$order_by", required: false')] const AOrderBy:String;
                [kbmMW_Rest('value: "$is_need_return_level", required: false')] const AIsNeedReturnLevel:String;
                [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                [kbmMW_Rest('value: "$is_need_sub_query_list", required: false')] const AIsNeedSubQueryList:String;
                [kbmMW_Rest('value: "$is_need_sum_count", required: false')] const is_need_sum_count:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //获取记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "get_record"')]
      function GetRecord([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                [kbmMW_Rest('value: "$where_key_json", required: false')] AWhereKeyJson:String;
                [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                [kbmMW_Rest('value: "$is_must_exist", required: false')] const AIsMustExist:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //获取用户的记录,支持key
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "get_user_record"')]
      function get_user_record([kbmMW_Rest('value: "$appid", required: false')] AAppID:String;
                [kbmMW_Rest('value: "$user_fid", required: false')] AUserFID:String;
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                [kbmMW_Rest('value: "$is_must_exist", required: false')] const AIsMustExist:String;
                //主键值
                [kbmMW_Rest('value: "$fid", required: false')] const fid:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;
      //获取用户的记录,支持key
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "get_record2"')]
      function get_record2([kbmMW_Rest('value: "$appid", required: false')] AAppID:String;
                [kbmMW_Rest('value: "$user_fid", required: false')] AUserFID:String;
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                [kbmMW_Rest('value: "$is_must_exist", required: false')] const AIsMustExist:String;
                //主键值
                [kbmMW_Rest('value: "$fid", required: false')] const fid:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //获取字段列表
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "get_field_list"')]
      function GetFieldList([kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;
      //添加字段列表
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "update_field_list_post"')]
      function update_field_list_post(
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;
      //更新字段列表
      //https://datasearch.laifuyun.com/tablecommonrest/init_intf_item?rest_name=es_searched_user
      //https://savesearch.laifuyun.com/tablecommonrest/init_intf_item?rest_name=es_searched_user
      //https://savesearch.laifuyun.com/tablecommonrest/init_intf_item?rest_name=find_auto_dev_detail
      //https://datasearch.laifuyun.com/tablecommonrest/init_intf_item?rest_name=search_subscribe_keyword_detail
      //https://datasearch.fumamx.com/tablecommonrest/init_intf_item?rest_name=account
      //https://datasearch.fumamx.com/tablecommonrest/init_intf_item?rest_name=search_subscribe_keyword_detail
      //https://savesearch.fumamx.com/tablecommonrest/init_intf_item?rest_name=find_auto_dev_detail
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "init_intf_item"')]
      function init_intf_item(//[kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
                //[kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
//                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;


    {$ENDREGION}


    public
      {$IFDEF USE_IDHTTPSERVERMODE}
      {$ELSE}
      function ProcessRequest(const Func:string; const ClientIdent:TkbmMWClientIdentity; const Args:array of Variant):Variant; override;
      {$ENDIF}
  end;





  TCommonRestServiceModule=class(TKbmMWServiceModule)
  public
    //表服务列表
    function IntfList:TCommonRestIntfList;
  public
    constructor Create; {$IFDEF USE_IDHTTPSERVERMODE}{$ELSE}override;{$ENDIF}
    destructor Destroy; override;
  public
    //准备启动
    function DoPrepareStart(var AError:String): Boolean; {$IFDEF USE_IDHTTPSERVERMODE}{$ELSE}override;{$ENDIF}
    //准备停止
    function DoPrepareStop: Boolean; {$IFDEF USE_IDHTTPSERVERMODE}{$ELSE}override;{$ENDIF}
  public
    function GetIntf(ARestName:String;
                            var AIntfItem:TCommonRestIntfItem;
                            var ADesc:String):Boolean;
  public
    //添加一条记录
    function AddRecord(ARestName:String;
                        ASQLDBHelper:TBaseDBHelper;
                        AAppID:String;
                        ARecordDataJson:ISuperObject;
                        var ACode:Integer;
                        var ADesc:String;
                        var ADataJson:ISuperObject
                        ):Boolean;
    //添加记录列表
    function AddRecordList(ARestName:String;
                        ASQLDBHelper:TBaseDBHelper;
                        AAppID:String;
                        ARecordDataJsonArray:ISuperArray;
                        var ACode:Integer;
                        var ADesc:String;
                        var ADataJson:ISuperObject
                        ):Boolean;
//    //修改一条记录
//    function UpdateRecord(ARestName:String;
//                          ASQLDBHelper:TBaseDBHelper;
//                          AAppID:String;
//                          ARecordDataJson:ISuperObject;
//                          //更新条件数组,Json数组
//                          AWhereKeyJson:String;
//                          //自带的Where条件,如  AND (1=1),可以不使用AWhereKeyJson
//                          ACustomConditionSQL:String;
//                          var ACode:Integer;
//                          var ADesc:String;
//                          var ADataJson:ISuperObject
//                          ):Boolean;
    //获取记录列表
    function GetRecordList(ARestName:String;
                          ASQLDBHelper:TBaseDBHelper;
                          AAppID:String;
                           APageIndex:Integer;
                           APageSize:Integer;
                           //查询条件,Json数组
                           AWhereKeyJson:String;
                           //排序
                           AOrderBy:String;
                           //自带的Where条件,如 AND (1=1),可以不使用AWhereKeyJson
                           ACustomConditionSQL:String;
                           //是否需要总数
                           AIsNeedSumCount:Integer;
                           //参数
                           ARecordDataJsonStr:String;
                           //需要子查询
                           AIsNeedSubQueryList:Integer;
                           var ACode:Integer;
                           var ADesc:String;
                           var ADataJson:ISuperObject;
                           AMasterRecordJson:ISuperObject=nil
                           ):Boolean;
    //获取记录
    function GetRecord(ARestName:String;
                        ASQLDBHelper:TBaseDBHelper;
                        AAppID:String;
                       //查询条件,Json数组
                       AWhereKeyJson:String;
                       //自带的Where条件,如 AND (1=1),可以不使用AWhereKeyJson
                       ACustomConditionSQL:String;
                       ARecordDataJsonStr:String;
                       var ACode:Integer;
                       var ADesc:String;
                       var ADataJson:ISuperObject;
                       AIsMustExist:Boolean=True;
                       //需要子查询
                       AIsNeedSubQueryList:Integer=1
                       ):Boolean;
//    //获取字段列表
//    function GetFieldList(ARestName:String;
//                          ASQLDBHelper:TBaseDBHelper;
//                           var ACode:Integer;
//                           var ADesc:String;
//                           var ADataJson:ISuperObject
//                           ):Boolean;
//    //真删一条记录
//    function RealDeleteRecord(
//                          ARestName:String;
//                          ASQLDBHelper:TBaseDBHelper;
//                          AAppID:String;
//                          //删除条件数组,Json数组
//                          AWhereKeyJson:String;
//                          //自带的Where条件,如  AND (1=1),可以不使用AWhereKeyJson
//                          ACustomConditionSQL:String;
//                          var ACode:Integer;
//                          var ADesc:String;
//                          var ADataJson:ISuperObject
//                          ):Boolean;
    //虚拟删除一条记录
    function DeleteRecord(
                          ARestName:String;
                          ASQLDBHelper:TBaseDBHelper;
                          AAppID:String;
                          //删除条件数组,Json数组
                          AWhereKeyJson:String;
                          //自带的Where条件,如  AND (1=1),可以不使用AWhereKeyJson
                          ACustomConditionSQL:String;
                          var ACode:Integer;
                          var ADesc:String;
                          var ADataJson:ISuperObject
                          ):Boolean;
  end;




var
  CommonRestServiceModule:TCommonRestServiceModule;
//  //是否可以添加记录的事件
//  GlobalOnCanAddRecord:TCanAddRecordEvent;




implementation



{$IFDEF USE_IDHTTPSERVERMODE}
{$ELSE}
uses
  kbmMWExceptions;


{$R *.dfm}
{$ENDIF}





{ TsrvTableCommonRestService }


function TsrvTableCommonRestService.AddRecord(const AAppID:String;const
  AUserFID: String; const AKey, ARestName, ARecordDataJson: String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;
var
//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;

  ARecordJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
//  AIsCanAddRecord:Boolean;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID='' then
  begin
    ADesc:=('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;



  ATableItem:=nil;
  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  try
//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;



    //插入新记录
//    ARecordJson:=SO(ARecordDataJson);
    ARecordJson:=TSuperObject.Create(ARecordDataJson);

//    AIsCanAddRecord:=True;
//    if Assigned(GlobalOnCanAddRecord) then
//    begin
//      AIsCanAddRecord:=GlobalOnCanAddRecord(Self,AAppID,AUserFID,AKey,ARestName,ARemoteLocation,ARecordJson,ACode,ADesc);
//    end;
//
//    if AIsCanAddRecord then
//    begin
      ATableItem.AddRecord(ATableItem.DBModule,
                            nil,
                            AAppID,
                            ARecordJson,
                            nil,
                            ACode,
                            ADesc,
                            ADataJson);
//    end;


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.AddRecordPost(const AAppID: String;
  const AUserFID, AKey, ARestName, ARecordDataJson, ARemoteLocation: String): String;
//var
//  AStringStream:TStringStream;
begin
//  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
//  try
//    RequestStream.Position:=0;
//    AStringStream.LoadFromStream(RequestStream);
//
//    //AStringStream.DataString
//  finally
//    FreeAndNil(AStringStream);
//  end;

  Result:=AddRecord(AAppID,AUserFID,AKey,ARestName,ARecordDataJson,ARemoteLocation);
end;

function TsrvTableCommonRestService.AddRecordPost2(const AAppID: String;
  const AUserFID, AKey, ARestName, ARemoteLocation: String): String;
var
  AStringStream:TStringStream;
begin
  {$IFDEF USE_IDHTTPSERVERMODE}
  {$ELSE}
  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
  try
    RequestStream.Position:=0;
    AStringStream.LoadFromStream(RequestStream);

    Result:=AddRecord(AAppID,AUserFID,AKey,ARestName,AStringStream.DataString,ARemoteLocation);
  finally
    FreeAndNil(AStringStream);
  end;
  {$ENDIF}

end;

function TsrvTableCommonRestService.AddRecordPost3(const AKey, ARestName,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

  AAppID, AUserFID: String;
  AUserAccessToken:TUserAccessToken;

  AStringStream:TStringStream;
begin

    ACode:=FAIL;
    ADesc:='';
    ADataJson:=nil;

    if AKey='' then
    begin

        ADesc:=('Key不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;

    end
    else
    begin

        AUserAccessToken:=GlobalServiceProject.FUserAccessTokenList.Find(AKey);

        if AUserAccessToken=nil then
        begin
          ADesc:='key:'+AKey+'无效或已过期';
          Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
          Exit;
        end;

        AAppID:=AUserAccessToken.AppID;
        AUserFID:=AUserAccessToken.UserFID;

    end;

    {$IFDEF USE_IDHTTPSERVERMODE}
    {$ELSE}
    AStringStream:=TStringStream.Create('',TEncoding.UTF8);
    try
      RequestStream.Position:=0;
      AStringStream.LoadFromStream(RequestStream);

      Result:=AddRecord(AAppID,AUserFID,AKey,ARestName,AStringStream.DataString,ARemoteLocation);
    finally
      FreeAndNil(AStringStream);
    end;
    {$ENDIF}

end;

function TsrvTableCommonRestService.update_field_list_post(const AKey, ARestName,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
  AStringStream:TStringStream;
  AFieldListJson: ISuperObject;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


//  if AAppID='' then
//  begin
//    ADesc:=('AppID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  Result:='';

  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
  RequestStream.Position:=0;
  AStringStream.LoadFromStream(RequestStream);
  try
      AFieldListJson:=SO(AStringStream.DataString);
      //查询记录列表
      if ATableItem<>nil then
      begin
        ATableItem.UpdateFieldList(
                                  ATableItem.DBModule,
                                  nil,
                                  AFieldListJson,
                                  ACode,
                                  ADesc,
                                  ADataJson
                                  );
      end;
  finally
    if Result='' then Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    FreeAndNil(AStringStream);
  end;

end;

function TsrvTableCommonRestService.AddRecordListPost(const AAppID: String;
  const AUserFID, AKey, ARestName, ARecordDataJsonArrayStr, ARemoteLocation: String): String;
//var
//  AStringStream:TStringStream;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;
var
  ARecordDataJsonArray:ISuperArray;
  ARecordList:ISuperArray;
  I: Integer;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

//  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
//  try
//    RequestStream.Position:=0;
//    AStringStream.LoadFromStream(RequestStream);
//
//    //AStringStream.DataString
//  finally
//    FreeAndNil(AStringStream);
//  end;
  try
    ARecordDataJsonArray:=TSuperArray.Create(ARecordDataJsonArrayStr);

    ARecordList:=TSuperArray.Create;
    ADataJson:=TSuperObject.Create;
    ADataJson.A['RecordList']:=ARecordList;
    for I := 0 to ARecordDataJsonArray.Length-1 do
    begin
      ARecordList.O[I]:=TSuperObject.Create(AddRecord(AAppID,AUserFID,AKey,ARestName,ARecordDataJsonArray.O[I].AsJson,ARemoteLocation));
    end;


    ACode:=SUCC;
    ADesc:='批量添加成功';
  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.AddRecordListPost2(const AAppID: String;
  const AUserFID, AKey, ARestName, ARemoteLocation: String): String;
var
  AStringStream:TStringStream;
begin
  {$IFDEF USE_IDHTTPSERVERMODE}
  {$ELSE}

  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
  try
    RequestStream.Position:=0;
    AStringStream.LoadFromStream(RequestStream);

    //AStringStream.DataString
    Result:=AddRecordListPost(AAppID,AUserFID,AKey,ARestName,AStringStream.DataString,ARemoteLocation);
  finally
    FreeAndNil(AStringStream);
  end;
  {$ENDIF}

end;

function TsrvTableCommonRestService.AddNumbers(const AValue1, AValue2: Integer;
  const ARemoteLocation: String): Integer;
begin
  Result:=AValue1+AValue2;
end;

function TsrvTableCommonRestService.DelRecord(const AAppID:String;const
  AUserFID: String; const AKey: String;
  const ARestName,AWhereKeyJson, ACustomConditionSQL: String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID='' then
  begin
    ADesc:=('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;


  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if (AWhereKeyJson='') and (ACustomConditionSQL='') then
  begin
    ADesc:=('条件不能同时为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  try


//    //接口验证员工是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;



    //删除记录
    ATableItem.DeleteRecord(
          ATableItem.DBModule,nil,
          AAppID,
          AWhereKeyJson,
          ACustomConditionSQL,
          ACode,
          ADesc,
          ADataJson
          );


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.DelRecordList(const AAppID:String;const
  AUserFID: String; const AKey, ARestName, AWhereJsonArray,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;

  AWhereJsonSuperArray:ISuperArray;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID='' then
  begin
    ADesc:=('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;


  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if (AWhereJsonArray='') then
  begin
    ADesc:=('条件不能同时为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  try


//    //接口验证员工是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;


    AWhereJsonSuperArray:=TSuperArray.Create(AWhereJsonArray);

    //删除记录列表
    ATableItem.DeleteRecordList(
          ATableItem.DBModule,nil,
          AAppID,
          AWhereJsonSuperArray,
          ACode,
          ADesc,
          ADataJson
          );


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;


end;

function TsrvTableCommonRestService.del_record2(AAppID, AUserFID:String;const AKey,
  ARestName, AWhereKeyJson, ACustomConditionSQL, fid,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
  AWhereKeyJsonArray:ISuperArray;
  AUserAccessToken:TUserAccessToken;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;




  if AKey='' then
  begin
      //因为有些接口不需要APPID的
      if AAppID='' then
      begin
        ADesc:=('AppID不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

      if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
      begin
        ADesc:=('UserFID不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

  end
  else
  begin

      AUserAccessToken:=GlobalServiceProject.FUserAccessTokenList.Find(AKey);

      if AUserAccessToken=nil then
      begin
        ADesc:='key:'+AKey+'无效或已过期';
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

      AAppID:=AUserAccessToken.AppID;
      AUserFID:=AUserAccessToken.UserFID;

  end;


//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;


  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if (AWhereKeyJson='') and (ACustomConditionSQL='') then
  begin
    ADesc:=('条件不能同时为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  try


//    //接口验证员工是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;


    AWhereKeyJsonArray:=SA(AWhereKeyJson);
    if fid<>'' then
    begin
      AWhereKeyJsonArray.O[AWhereKeyJsonArray.Length]:=GetFieldCondition('AND',ATableItem.PKFieldName,'=',fid);
    end;



    //删除记录
    ATableItem.DeleteRecord(
          ATableItem.DBModule,nil,
          AAppID,
          AWhereKeyJsonArray.AsJson,
          ACustomConditionSQL,
          ACode,
          ADesc,
          ADataJson
          );


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;


end;

function TsrvTableCommonRestService.del_record_list2(AAppID, AUserFID: String;
  const AKey, ARestName, AWhereJsonArray, fid_json_array,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;

  ASubWhereKeyJson:ISuperObject;
  AWhereJsonSuperArray:ISuperArray;
  AFIDJsonArray:ISuperArray;
  I: Integer;
  AUserAccessToken:TUserAccessToken;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;




  if AKey='' then
  begin
      //因为有些接口不需要APPID的
      if AAppID='' then
      begin
        ADesc:=('AppID不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

      if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
      begin
        ADesc:=('UserFID不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

  end
  else
  begin

      AUserAccessToken:=GlobalServiceProject.FUserAccessTokenList.Find(AKey);

      if AUserAccessToken=nil then
      begin
        ADesc:='key:'+AKey+'无效或已过期';
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

      AAppID:=AUserAccessToken.AppID;
      AUserFID:=AUserAccessToken.UserFID;

  end;



//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;


  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if (AWhereJsonArray='') and (fid_json_array='') then
  begin
    ADesc:=('条件不能同时为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  try


//    //接口验证员工是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;

    //AWhereJsonArray里面是WhereKeyJson的Array
    if AWhereJsonArray<>'' then
    begin
      AWhereJsonSuperArray:=TSuperArray.Create(AWhereJsonArray);
    end
    else
    begin
      AWhereJsonSuperArray:=SA();
    end;

    if fid_json_array<>'' then
    begin
      AFIDJsonArray:=SA(fid_json_array);
      for I := 0 to AFIDJsonArray.Length-1 do
      begin
        ASubWhereKeyJson:=SO();
        ASubWhereKeyJson.A['where_key_json'].O[0]:=GetWhereCondition('AND','fid','=',AFIDJsonArray.V[I]);
        AWhereJsonSuperArray.O[AWhereJsonSuperArray.Length]:=ASubWhereKeyJson;
      end;
    end;


    //删除记录列表
    ATableItem.DeleteRecordList(
                                ATableItem.DBModule,nil,
                                AAppID,
                                AWhereJsonSuperArray,
                                ACode,
                                ADesc,
                                ADataJson
                                );

  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;


end;

function TsrvTableCommonRestService.EchoString(const AString: String): String;
begin
  Result:='你好！'+astring;
end;

function TsrvTableCommonRestService.GetFieldList(const AAppID:String;const
  AUserFID: String; const AKey, ARestName, ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


//  if AAppID='' then
//  begin
//    ADesc:=('AppID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;



  try


    //查询记录列表
    if ATableItem<>nil then
    begin
      ATableItem.GetFieldList(
            ATableItem.DBModule,
            nil,
            ACode,
            ADesc,
            ADataJson
            );
    end;



  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;
end;

function TsrvTableCommonRestService.GetRecordList(const AAppID:String;const
  AUserFID: String; const AKey:String;
  const APageIndex,APageSize:Integer;
  const ARestName,AWhereKeyJson, ACustomConditionSQL, AOrderBy:String;
  const AIsNeedReturnLevel:String;
  const ARecordDataJson:String;
  const AIsNeedSubQueryList:String;
  const is_need_sum_count:String;
  const is_need_record_list:String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AUserType:Integer;
  ATableItem:TCommonRestIntfItem;
begin


  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;




  //因为有些接口不需要APPID的
//  if AAppID='' then
//  begin
//    ADesc:=('AppID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;




  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;



  try

//    //接口验证用户是否合法
//    //获取用户类型
//    if not GlobalServiceProject.GetUserType(
//              AAppID,
//              AUserFID,
//              AKey,
//              ACode,
//              ADesc,
//              ADataJson,
//              AUserType
//              ) then
//    begin
//      Exit;
//    end;



    //查询记录列表
    if ATableItem<>nil then
    begin

//        //检测用户类型的查询条件
//        if ATableItem.QueryUserTypeConditions.Count>0 then
//        begin
//          //需要检测用户类型是否存在条件,如果不存在条件需要提示出来
//          if not ATableItem.CheckQueryUserTypeCondition(AUserType,AWhereKeyJson,ADesc) then
//          begin
//            Exit;
//          end;
//        end;



        ATableItem.GetRecordList(
                                  ATableItem.DBModule,
                                  nil,
                                  AAppID,
                                  APageIndex,
                                  APageSize,
                                  AWhereKeyJson,
                                  AOrderBy,
                                  ACustomConditionSQL,
                                  Ord((is_need_sum_count='1') or (is_need_sum_count='')),//1,//需要返回sum_count
                                  Ord(AIsNeedReturnLevel='1'),//是否需要返回层级Level
                                  ARecordDataJson,
                                  Ord(AIsNeedSubQueryList='1'),
                                  ACode,
                                  ADesc,
                                  ADataJson,
                                  nil,
                                  ((is_need_record_list='1') or (is_need_record_list=''))
                                  );
    end;


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.get_user_record_list(AAppID:String;
  AUserFID: String; const AKey:String;
  const APageIndex,APageSize:Integer;
  const ARestName,AWhereKeyJson, ACustomConditionSQL, AOrderBy:String;
  const AIsNeedReturnLevel:String;
  const ARecordDataJson:String;
  const AIsNeedSubQueryList:String;
  const is_need_sum_count:String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AUserType:Integer;
  ATableItem:TCommonRestIntfItem;
  AUserAccessToken:TUserAccessToken;

  AWhereKeyJsonArray:ISuperArray;
begin


  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;



  if AKey='' then
  begin
      //因为有些接口不需要APPID的
    //  if AAppID='' then
    //  begin
    //    ADesc:=('AppID不能为空');
    //    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    //    Exit;
    //  end;

      if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
      begin
        ADesc:=('UserFID不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

  end
  else
  begin

      AUserAccessToken:=GlobalServiceProject.FUserAccessTokenList.Find(AKey);

      if AUserAccessToken=nil then
      begin
        ADesc:='key:'+AKey+'无效或已过期';
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

      AAppID:=AUserAccessToken.AppID;
      AUserFID:=AUserAccessToken.UserFID;

  end;



  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  AWhereKeyJsonArray:=SA(AWhereKeyJson);
  AWhereKeyJsonArray.O[AWhereKeyJsonArray.Length]:=GetFieldCondition('AND','user_fid','=',AUserFID);

  try

//    //接口验证用户是否合法
//    //获取用户类型
//    if not GlobalServiceProject.GetUserType(
//              AAppID,
//              AUserFID,
//              AKey,
//              ACode,
//              ADesc,
//              ADataJson,
//              AUserType
//              ) then
//    begin
//      Exit;
//    end;



    //查询记录列表
    if ATableItem<>nil then
    begin

//        //检测用户类型的查询条件
//        if ATableItem.QueryUserTypeConditions.Count>0 then
//        begin
//          //需要检测用户类型是否存在条件,如果不存在条件需要提示出来
//          if not ATableItem.CheckQueryUserTypeCondition(AUserType,AWhereKeyJson,ADesc) then
//          begin
//            Exit;
//          end;
//        end;



        ATableItem.GetRecordList(
                                  ATableItem.DBModule,
                                  nil,
                                  AAppID,
                                  APageIndex,
                                  APageSize,
                                  AWhereKeyJsonArray.AsJson,//AWhereKeyJson,
                                  AOrderBy,
                                  ACustomConditionSQL,
                                  Ord((is_need_sum_count='1') or (is_need_sum_count='')),//1,//需要返回sum_count
                                  Ord(AIsNeedReturnLevel='1'),//是否需要返回层级Level
                                  ARecordDataJson,
                                  Ord(AIsNeedSubQueryList='1'),
                                  ACode,
                                  ADesc,
                                  ADataJson
                                  );
    end;


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.GetRecord(const AAppID:String;const
  AUserFID: String; const AKey:String;
  const ARestName:String;
  AWhereKeyJson:String;
  const ACustomConditionSQL,
  ARecordDataJson,AIsMustExist,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;

  ATableItem:TCommonRestIntfItem;
//  ARedisClient:TRedisClient;
//  ARedisValue:String;
//  ASuperArray:ISuperArray;
begin


  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


//  AWhereKeyJson:=TNetEncoding.URL.Decode(AWhereKeyJson);

  if AAppID='' then
  begin
    ADesc:=('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  //  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
  //  begin
  //    ADesc:=('UserFID不能为空');
  //    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  //    Exit;
  //  end;



  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;
  //ARedisClient:=GlobalServiceProject.GetRedisClient;
  try

//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //用户身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;




    //查询记录列表
    if ATableItem<>nil then
    begin


//      //判断下有没有缓存
//      if
//
//          //取缓存失败
//          (ARedisClient<>nil) and  ARedisClient.GET(IntToStr(AAppID)+'_'+'get_record'+'_'+ARestName+'_'+AWhereKeyJson,ARedisValue)
//          then
//      begin


//
//          //有缓存
//          ADataJson:=TSuperObject.Create(ARedisValue);
//          ACode:=SUCC;
//      end
//      else
//      begin
//

          ATableItem.GetRecord(
                      ATableItem.DBModule,
                      nil,
                      AAppID,
                      AWhereKeyJson,
                      ACustomConditionSQL,
                      ARecordDataJson,
                      ACode,
                      ADesc,
                      ADataJson,
                      (AIsMustExist<>'0')//默认为空,为1,表示是必须存在的
                      );



//          //设置缓存,10分钟过期
//          if (ARedisClient<>nil) then ARedisClient.&Set(IntToStr(AAppID)+'_'+'get_record'+'_'+ARestName+'_'+AWhereKeyJson,ADataJson.AsJSON,REDIS_COMMON_TIMEOUT);
//
//      end;




    end;


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;

    //GlobalServiceProject.FreeRedisClient(ARedisClient);
  end;

end;

function TsrvTableCommonRestService.get_user_record( AAppID:String;
  AUserFID: String; const AKey:String;
  const ARestName,AWhereKeyJson, ACustomConditionSQL,
  ARecordDataJson,AIsMustExist,fid,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;

  ATableItem:TCommonRestIntfItem;
//  ARedisClient:TRedisClient;
//  ARedisValue:String;
//  ASuperArray:ISuperArray;
  AUserAccessToken:TUserAccessToken;

  AWhereKeyJsonArray:ISuperArray;
begin


  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;




  if AKey='' then
  begin
      //因为有些接口不需要APPID的
      if AAppID='' then
      begin
        ADesc:=('AppID不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

      if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
      begin
        ADesc:=('UserFID不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

  end
  else
  begin

      AUserAccessToken:=GlobalServiceProject.FUserAccessTokenList.Find(AKey);

      if AUserAccessToken=nil then
      begin
        ADesc:='key:'+AKey+'无效或已过期';
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

      AAppID:=AUserAccessToken.AppID;
      AUserFID:=AUserAccessToken.UserFID;

  end;









  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;




  AWhereKeyJsonArray:=SA(AWhereKeyJson);
  AWhereKeyJsonArray.O[AWhereKeyJsonArray.Length]:=GetFieldCondition('AND','user_fid','=',AUserFID);

  if fid<>'' then
  begin
    AWhereKeyJsonArray.O[AWhereKeyJsonArray.Length]:=GetFieldCondition('AND',ATableItem.PKFieldName,'=',fid);
  end;



  //ARedisClient:=GlobalServiceProject.GetRedisClient;
  try

//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //用户身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;




    //查询记录列表
    if ATableItem<>nil then
    begin


//      //判断下有没有缓存
//      if
//
//          //取缓存失败
//          (ARedisClient<>nil) and  ARedisClient.GET(IntToStr(AAppID)+'_'+'get_record'+'_'+ARestName+'_'+AWhereKeyJson,ARedisValue)
//          then
//      begin


//
//          //有缓存
//          ADataJson:=TSuperObject.Create(ARedisValue);
//          ACode:=SUCC;
//      end
//      else
//      begin
//

          ATableItem.GetRecord(
                      ATableItem.DBModule,
                      nil,
                      AAppID,
                      AWhereKeyJson,
                      ACustomConditionSQL,
                      ARecordDataJson,
                      ACode,
                      ADesc,
                      ADataJson,
                      (AIsMustExist<>'0')//默认为空,为1,表示是必须存在的
                      );



//          //设置缓存,10分钟过期
//          if (ARedisClient<>nil) then ARedisClient.&Set(IntToStr(AAppID)+'_'+'get_record'+'_'+ARestName+'_'+AWhereKeyJson,ADataJson.AsJSON,REDIS_COMMON_TIMEOUT);
//
//      end;




    end;


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;

    //GlobalServiceProject.FreeRedisClient(ARedisClient);
  end;

end;

function TsrvTableCommonRestService.get_record2( AAppID:String;
  AUserFID: String; const AKey:String;
  const ARestName,AWhereKeyJson, ACustomConditionSQL,
  ARecordDataJson,AIsMustExist,fid,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;

  ATableItem:TCommonRestIntfItem;
//  ARedisClient:TRedisClient;
//  ARedisValue:String;
//  ASuperArray:ISuperArray;
  AUserAccessToken:TUserAccessToken;

  AWhereKeyJsonArray:ISuperArray;
begin


  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;




  if AKey='' then
  begin
      //因为有些接口不需要APPID的
      if AAppID='' then
      begin
        ADesc:=('AppID不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

      if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
      begin
        ADesc:=('UserFID不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

  end
  else
  begin

      AUserAccessToken:=GlobalServiceProject.FUserAccessTokenList.Find(AKey);

      if AUserAccessToken=nil then
      begin
        ADesc:='key:'+AKey+'无效或已过期';
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;
      end;

      AAppID:=AUserAccessToken.AppID;
      AUserFID:=AUserAccessToken.UserFID;

  end;



  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;




  AWhereKeyJsonArray:=SA(AWhereKeyJson);
  if fid<>'' then
  begin
    AWhereKeyJsonArray.O[AWhereKeyJsonArray.Length]:=GetFieldCondition('AND',ATableItem.PKFieldName,'=',fid);
  end;



  //ARedisClient:=GlobalServiceProject.GetRedisClient;
  try

//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //用户身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;




    //查询记录列表
    if ATableItem<>nil then
    begin


//      //判断下有没有缓存
//      if
//
//          //取缓存失败
//          (ARedisClient<>nil) and  ARedisClient.GET(IntToStr(AAppID)+'_'+'get_record'+'_'+ARestName+'_'+AWhereKeyJson,ARedisValue)
//          then
//      begin


//
//          //有缓存
//          ADataJson:=TSuperObject.Create(ARedisValue);
//          ACode:=SUCC;
//      end
//      else
//      begin
//

          ATableItem.GetRecord(
                      ATableItem.DBModule,
                      nil,
                      AAppID,
                      AWhereKeyJsonArray.AsJSON(),//AWhereKeyJson,
                      ACustomConditionSQL,
                      ARecordDataJson,
                      ACode,
                      ADesc,
                      ADataJson,
                      (AIsMustExist<>'0')//默认为空,为1,表示是必须存在的
                      );



//          //设置缓存,10分钟过期
//          if (ARedisClient<>nil) then ARedisClient.&Set(IntToStr(AAppID)+'_'+'get_record'+'_'+ARestName+'_'+AWhereKeyJson,ADataJson.AsJSON,REDIS_COMMON_TIMEOUT);
//
//      end;




    end;


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;

    //GlobalServiceProject.FreeRedisClient(ARedisClient);
  end;

end;

function TsrvTableCommonRestService.get_record_list_post(//const AAppID:String;const
  //AUserFID: String;
  const AKey:String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

  APostJson:ISuperObject;
  AStringStream:TStringStream;
//  AClientItem:TWebSearchTaskProcessClientRegItem;
begin
//  uBaseLog.HandleException(nil,'TsrvSearchCenterRestService.sub_server_register Begin '
////                              +' appid:'+appid
////                              +' name:'+name
////                              +' interface_url:'+interface_url
////                              +' max_process_count:'+IntToStr(max_process_count)
////                              +' ARemoteLocation:'+ARemoteLocation
//                              );

//                [kbmMW_Rest('value: "$appid", required: false')] const AAppID:String;
//                [kbmMW_Rest('value: "$user_fid", required: false')] const AUserFID:String;
//                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
//                [kbmMW_Rest('value: "$pageindex", required: false')] const APageIndex:Integer;
//                [kbmMW_Rest('value: "$pagesize", required: false')] const APageSize:Integer;
//                [kbmMW_Rest('value: "$rest_name", required: false')] const ARestName:String;
//                [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
//                [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
//                [kbmMW_Rest('value: "$order_by", required: false')] const AOrderBy:String;
//                [kbmMW_Rest('value: "$is_need_return_level", required: false')] const AIsNeedReturnLevel:String;
//                [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
//                [kbmMW_Rest('value: "$is_need_sub_query_list", required: false')] const AIsNeedSubQueryList:String;
//                [kbmMW_Rest('value: "$is_need_sum_count", required: false')] const is_need_sum_count:String;
//                [kbmMW_Rest('value: "$is_need_record_list", required: false')] const is_need_record_list:String;

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:='';

  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
  RequestStream.Position:=0;
  AStringStream.LoadFromStream(RequestStream);
  try
    APostJson:=SO(AStringStream.DataString);

    Result:=Self.GetRecordList(VarToStr(APostJson.V['appid']),//AAppID,
                               APostJson.S['user_fid'],// AUserFID,
                               AKey,
                               APostJson.I['pageindex'],
                               APostJson.I['pagesize'],
                               APostJson.S['rest_name'],
                               APostJson.S['where_key_json'],
                               APostJson.S['where_sql'],
                               APostJson.S['order_by'],
                               VarToStr(APostJson.V['is_need_return_level']),
                               //ARecordDataJson
                               APostJson.AsJson,//APostJson.S['record_data_json'],//.AsJson,
                               VarToStr(APostJson.V['is_need_sub_query_list']),
                               VarToStr(APostJson.V['is_need_sum_count']),
                               VarToStr(APostJson.V['is_need_record_list']),
                               ARemoteLocation
                               );

  finally
    if Result='' then Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    FreeAndNil(AStringStream);
  end;

end;

//function TsrvTableCommonRestService.QueryRecordList(const AAppID:String;const
//  AUserFID: String; const AKey:String;
//  const APageIndex,APageSize:Integer;
//  const ARestName,AWhereKeyJson,AOrderBy,
//  ARemoteLocation: String): String;
//var
//  ACode:Integer;
//  ADesc:String;
//  ADataJson:ISuperObject;
//
//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
//  ATableItem:TQueryCommonRestServerItem;
//begin
//
//
//  ACode:=FAIL;
//  ADesc:='';
//  ADataJson:=nil;
//
//
//  if AAppID='' then
//  begin
//    ADesc:=('AppID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;
//
//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;
//
//  if ARestName='' then
//  begin
//    ADesc:=('RestName不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;
//
//
//  ATableItem:=nil;
//  AQueryItem:=nil;
//
//  ATableItem:=CommonRestServiceModule.QueryList.Find(ARestName);
//  if ATableItem=nil then
//  begin
//    ADesc:=('不存在'+ARestName+'服务');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;
//
//
//
//  try
//
//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //用户身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;
//
//
//    //查询记录列表
//    ATableItem.GetRecordList(
//          nil,
//          APageIndex,
//          APageSize,
//          AWhereKeyJson,
//          AOrderBy,
//          '',
//          1,
//          ACode,
//          ADesc,
//          ADataJson
//          );
//
//
//  finally
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//  end;
//
//end;

function TsrvTableCommonRestService.HelloWorld: String;
begin
  Result:='Hello world';
end;

procedure TsrvTableCommonRestService.kbmMWCustomHTTPSmartServiceCORS(
  Sender: TObject; const ARequestHelper,
  AResponseHelper: TkbmMWHTTPTransportStreamHelper; const AOrigin: string;
  var AAllowedOrigins, AAllowedMethods, AAllowedHeaders: string);
begin
  AAllowedMethods:='GET' ;
  AAllowedOrigins:='*';//'http://127.0.0.1';
  AAllowedHeaders:= 'x-requested-with';
end;


{$IFDEF USE_IDHTTPSERVERMODE}
{$ELSE}
function TsrvTableCommonRestService.ProcessRequest(const Func: string;
  const ClientIdent: TkbmMWClientIdentity;
  const Args: array of Variant): Variant;
var
  ADesc:String;

  ABytes:TKbmmwBytes;
  inBuffer: TBytes;
  outBuffer: TBytes;
  AResultStr:String;
  AStartTime:TDateTime;
  ARestName:String;
  AStartIndex:Integer;
  AEndIndex:Integer;
begin
  AStartTime:=Now;

  ProcessCORSRequest;


  ARestName:='';
  if (length(Args)>2)
    and (Args[0]<>'/tablecommonrest/get_record')
    and (Args[0]<>'/tablecommonrest/init_intf_item')
  then
  begin
    //Args[2]=appid=1016&user_fid=B25FF37922F54D98AAA5C6E4B2C90154&key=830F5B18BCC9450C9E15FC072738235A&
    //rest_name=workshop&pageindex=1&pagesize=2147483647&where_key_json=&timestamp=1653976246&nonce=1653976246dkuac&signtype=md5&sign=bd9fb54baabe02f6044efd9dd4d21e99
    //验签
    //取到appid,获取到appsecret,再验签,appid放在列表中,每次服务器启动时获取签名
    if not GlobalServiceProject.CheckInterfaceSign(ClientIdent,RequestTransportStream,Args[0],Args[2],ADesc) then
    begin
      Result:=ReturnJson(FAIL,ADesc,nil).AsJSON;
      Exit;
    end;

    AStartIndex:=Pos('rest_name=',Args[2]);
    if AStartIndex>0 then
    begin
      AStartIndex:=AStartIndex+Length('rest_name=');
      AEndIndex:=Pos('&',Args[2],AStartIndex);
      if AEndIndex=0 then
      begin
        AEndIndex:=Length(Args[2]);
      end;
      ARestName:=Copy(Args[2],AStartIndex,AEndIndex-AStartIndex);

    end;
  end;



  try
    Result:=Inherited;
  except
    on E:Exception do
    begin
      //异常
      Result:=ReturnJson(FAIL,Args[0]+' Error:'+E.Message,nil).AsJSON;
    end;
  end;


  //判断是否需要压缩
  //Args[2]'appid=1013&phone=19857901025&password=123456&compressed=1'
  if Pos('compressed=1',Args[2])>0 then
  begin
      //压缩
      AResultStr:=Result;
      inBuffer:=TEncoding.UTF8.GetBytes(AResultStr);
      try
        ZLib.ZCompress(inBuffer,outBuffer);
        Result:=outBuffer;
      finally
      end;
  end;



  //统计接口调用
  GlobalServiceProject.FAPICallStatisticsList.AddCall(ClientIdent.ServicePath+'?rest_name='+ARestName,DateUtils.MilliSecondsBetween(Now,AStartTime));


end;

function TsrvTableCommonRestService.save_record_list_post(const AAppID,
  AUserFID, AKey, ARestName, check_exist_field_names, ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  ACode2:Integer;
//  ADesc2:String;
//  ADataJson2:ISuperObject;
//
//  ASuperObject:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ARecordList:ISuperArray;
  ATableItem:TCommonRestIntfItem;
//  I: Integer;
var
  AStringStream:TStringStream;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID='' then
  begin
    ADesc:=('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if ARecordDataJson='' then
//  begin
//    ADesc:=('RecordDataJson不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if (check_exist_field_names='') then
  begin
    ADesc:=('check_exist_field_names不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
  try

    {$IFDEF USE_IDHTTPSERVERMODE}
    {$ELSE}
      RequestStream.Position:=0;
      AStringStream.LoadFromStream(RequestStream);




  //    //接口验证用户是否合法
  //    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
  //                                nil,
  //                                '',
  //                                ['appid',
  //                                'user_fid',
  //                                'key'],
  //                                [AAppID,
  //                                AUserFID,
  //                                AKey],
  //                      GlobalServiceProject.GetAppSignType(AAppID),
  //                      GlobalServiceProject.GetAppSecret(AAppID)
  //                                );
  //    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
  //
  //    if AHttpResponseJson.I['Code']=SUCC then
  //    begin
  //      //员工身份合法
  //    end
  //    else
  //    begin
  //      ADesc:=(AHttpResponseJson.S['Desc']);
  //      Exit;
  //    end;

      ADataJson:=SO();
      ADataJson.A['RecordList']:=SA();

      //修改记录
      ARecordList:=SA(AStringStream.DataString);
      if not ATableItem.SaveRecordList(
                                      ATableItem.DBModule,
                                      nil,
                                      AAppID,
                                      ARecordList,
                                      check_exist_field_names,
                                      ACode,
                                      ADesc,
                                      ADataJson
                                      ) then
      begin
        Exit;
      end;
//      for I := 0 to ARecordList.Length-1 do
//      begin
//          ATableItem.SaveRecord(
//                              ATableItem.DBModule,
//                              nil,
//                              AAppID,
//                              ARecordList.O[I],
//                              check_exist_field_names,
//                              ACode2,
//                              ADesc2,
//                              ADataJson2
//                              );
//
//          ASuperObject:=ReturnJson(ACode2,ADesc2,ADataJson2);
//          ADataJson.A['RecordList'].O[ADataJson.A['RecordList'].Length]:=ASuperObject;
//
//
//      end;



    {$ENDIF}

    ACode:=SUCC;
    ADesc:='保存成功';

  finally
    FreeAndNil(AStringStream);
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;


end;

function TsrvTableCommonRestService.save_record_post(const AAppID, AUserFID,
  AKey, ARestName, check_exist_field_names,
  ARemoteLocation: String): String;

var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ARecordJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
var
  AStringStream:TStringStream;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;
  if AAppID='' then
  begin
    ADesc:=('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if ARecordDataJson='' then
//  begin
//    ADesc:=('RecordDataJson不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if (check_exist_field_names='') then
  begin
    ADesc:=('check_exist_field_names不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
  try

  {$IFDEF USE_IDHTTPSERVERMODE}
  {$ELSE}
    RequestStream.Position:=0;
    AStringStream.LoadFromStream(RequestStream);




//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;



    //修改记录
    ARecordJson:=SO(AStringStream.DataString);
    ATableItem.SaveRecord(
                          ATableItem.DBModule,
                          nil,
                          AAppID,
                          ARecordJson,
                          check_exist_field_names,
                          ACode,
                          ADesc,
                          ADataJson
                          );



  {$ENDIF}


  finally
    FreeAndNil(AStringStream);
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.init_intf_item(const ARestName,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;



  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;



  try


    if not ATableItem.Init(ATableItem.DBModule,ADesc) then
    begin
      Exit;
    end;

    ACode:=SUCC;

  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;
end;

{$ENDIF}

function TsrvTableCommonRestService.UpdateRecord(const AAppID:String;const
  AUserFID: String; const AKey: String; const ARestName,
  ARecordDataJson, AWhereKeyJson, ACustomConditionSQL: String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ARecordJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID='' then
  begin
    ADesc:=('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if ARecordDataJson='' then
  begin
    ADesc:=('RecordDataJson不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if (AWhereKeyJson='') and (ACustomConditionSQL='') then
  begin
    ADesc:=('条件不能同时为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;




  try


//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;



    //修改记录
    ARecordJson:=TSuperObject.Create(ARecordDataJson);
    ATableItem.UpdateRecord(
                      ATableItem.DBModule,
                      nil,
                      AAppID,
                      ARecordJson,
                      AWhereKeyJson,
                      ACustomConditionSQL,
                      ACode,
                      ADesc,
                      ADataJson
                      );


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.UpdateRecordList(const AAppID:String;const
  AUserFID: String; const AKey: String; const ARestName,
  ARecordDataJsonArray: String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;

  ARecordJsonArray:ISuperArray;
  ARecordJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
  I: Integer;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID='' then
  begin
    ADesc:=('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if ARecordDataJsonArray='' then
  begin
    ADesc:=('RecordDataJsonArray不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;




  try


//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;



    //批量修改记录
    ARecordJsonArray:=TSuperArray.Create(ARecordDataJsonArray);
    for I := 0 to ARecordJsonArray.Length-1 do
    begin
      ARecordJson:=ARecordJsonArray.O[I];
      if not ATableItem.UpdateRecord(
                        ATableItem.DBModule,
                        nil,
                        AAppID,
                        ARecordJson.O['record_data_json'],
                        ARecordJson.S['where_key_json'],
                        ARecordJson.S['where_sql'],
                        ACode,
                        ADesc,
                        ADataJson
                        ) then
      begin
        Exit;
      end;
    end;


    ACode:=SUCC;
    ADesc:=('批量编辑成功');

  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;


function TsrvTableCommonRestService.UpdateRecordPost(const AAppID: String;
  const AUserFID, AKey, ARestName, AWhereKeyJson, ACustomConditionSQL,
  ARemoteLocation: String): String;
var
  AStringStream:TStringStream;
begin

  {$IFDEF USE_IDHTTPSERVERMODE}
  {$ELSE}
  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
  try
    RequestStream.Position:=0;
    AStringStream.LoadFromStream(RequestStream);

    Result:=UpdateRecord(AAppID,AUserFID,AKey,ARestName,AStringStream.DataString,AWhereKeyJson,ACustomConditionSQL,ARemoteLocation);
  finally
    FreeAndNil(AStringStream);
  end;
  {$ENDIF}

end;

function TsrvTableCommonRestService.UpdateRecordPost2(const AKey, ARestName,
  AWhereKeyJson, ACustomConditionSQL, ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

  AAppID, AUserFID: String;
  AUserAccessToken:TUserAccessToken;

  AStringStream:TStringStream;
begin
    ACode:=FAIL;
    ADesc:='';
    ADataJson:=nil;

    if AKey='' then
    begin

        ADesc:=('Key不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;

    end
    else
    begin

        AUserAccessToken:=GlobalServiceProject.FUserAccessTokenList.Find(AKey);

        if AUserAccessToken=nil then
        begin
          ADesc:='key:'+AKey+'无效或已过期';
          Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
          Exit;
        end;

        AAppID:=AUserAccessToken.AppID;
        AUserFID:=AUserAccessToken.UserFID;

    end;

    {$IFDEF USE_IDHTTPSERVERMODE}
    {$ELSE}
    AStringStream:=TStringStream.Create('',TEncoding.UTF8);
    try
      RequestStream.Position:=0;
      AStringStream.LoadFromStream(RequestStream);

      Result:=UpdateRecord(AAppID,AUserFID,AKey,ARestName,AStringStream.DataString,AWhereKeyJson,ACustomConditionSQL,ARemoteLocation);
    finally
      FreeAndNil(AStringStream);
    end;
    {$ENDIF}
end;

function TsrvTableCommonRestService.update_record_post_3(const AKey,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

  AAppID, AUserFID: String;
  AUserAccessToken:TUserAccessToken;

  AStringStream:TStringStream;
  ASuperObject:ISuperObject;
begin
    ACode:=FAIL;
    ADesc:='';
    ADataJson:=nil;

    if AKey='' then
    begin

        ADesc:=('Key不能为空');
        Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
        Exit;

    end
    else
    begin

        AUserAccessToken:=GlobalServiceProject.FUserAccessTokenList.Find(AKey);

        if AUserAccessToken=nil then
        begin
          ADesc:='key:'+AKey+'无效或已过期';
          Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
          Exit;
        end;

        AAppID:=AUserAccessToken.AppID;
        AUserFID:=AUserAccessToken.UserFID;

    end;

    {$IFDEF USE_IDHTTPSERVERMODE}
    {$ELSE}
    AStringStream:=TStringStream.Create('',TEncoding.UTF8);
    try
      RequestStream.Position:=0;
      AStringStream.LoadFromStream(RequestStream);

      ASuperObject:=SO(AStringStream.DataString);

      Result:=UpdateRecord(AAppID,
                            AUserFID,
                            AKey,
                            ASuperObject.S['rest_name'],//ARestName,
                            ASuperObject.O['record_data_json'].AsJson,//AStringStream.DataString,
                            ASuperObject.A['where_key_json'].AsJson,//AWhereKeyJson,
                            ASuperObject.S['where_sql'],//ACustomConditionSQL,
                            ARemoteLocation);
    finally
      FreeAndNil(AStringStream);
    end;
    {$ENDIF}

end;

{ TCommonRestServiceModule }

function TCommonRestServiceModule.AddRecord(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:String;
  ARecordDataJson: ISuperObject;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;



  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Exit;
  end;


  //插入新记录
  Result:=ATableItem.AddRecord(
                              ATableItem.DBModule,
                              ASQLDBHelper,
                              AAppID,
                              ARecordDataJson,
                              nil,
                              ACode,
                              ADesc,
                              ADataJson);

end;

function TCommonRestServiceModule.AddRecordList(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:String;
  ARecordDataJsonArray: ISuperArray;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;



  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Exit;
  end;


  //插入记录列表
  Result:=ATableItem.AddRecordList(
                        ATableItem.DBModule,
                        ASQLDBHelper,
                        AAppID,
                        ARecordDataJsonArray,
                        nil,
                        ACode,
                        ADesc,
                        ADataJson);

end;

function TCommonRestServiceModule.GetIntf(ARestName: String;
  var AIntfItem:TCommonRestIntfItem;
  var ADesc: String): Boolean;
begin
  Result:=False;
  AIntfItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if AIntfItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Exit;
  end;
  Result:=True;
end;

constructor TCommonRestServiceModule.Create;
begin
  inherited;

//  IntfList:=TCommonRestIntfList.Create;

end;

function TCommonRestServiceModule.DeleteRecord(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:String;
  AWhereKeyJson, ACustomConditionSQL: String;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;



  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Exit;
  end;


  //删除记录
  Result:=ATableItem.DeleteRecord(
            ATableItem.DBModule,
            ASQLDBHelper,
            AAppID,
            AWhereKeyJson,
            ACustomConditionSQL,
            ACode,
            ADesc,
            ADataJson
            );

end;

destructor TCommonRestServiceModule.Destroy;
begin
//  FreeAndNil(IntfList);
  inherited;
end;

function TCommonRestServiceModule.DoPrepareStart(var AError:String): Boolean;
//var
//  I: Integer;
//  ATempError:String;

//  ASuperObject:ISuperObject;
//  ASQLDBHelper:TBaseDBHelper;
//  ACommonRestIntfItem:TCommonRestIntfItem;
begin
  {$IFDEF USE_IDHTTPSERVERMODE}
  {$ELSE}
  Result:=Inherited;
  {$ENDIF}

  GlobalCommonRestIntf_ASyncCallTaskManager:=TCommonRestIntf_ASyncCallTaskManager.Create;

//  if not Result then Exit;
//
//
//  for I := 0 to IntfList.Count-1 do
//  begin
//    ATempError:='';
//    if not IntfList[I].DoPrepareStart(ATempError) then
//    begin
//      AError:=AError+ATempError+#13#10;
//      Result:=False;
//    end;
//  end;



//  //从数据库读取页面的接口列表
//  if not CommonRestServiceModule.DBModule.GetDBHelperFromPool(ASQLDBHelper,AError) then
//  begin
//    Exit;
//  end;
//  try
//    if ASQLDBHelper.SelfQuery('SELECT * FROM tbldata_interface WHERE type=''table_common_rest'' AND db_hostname<>'''' ',
//                                  [],[],asoOpen) then
//    begin
//        while not ASQLDBHelper.Query.Eof do
//        begin
//          ATempError:='';
//
//          ASuperObject:=JSonFromRecord(ASQLDBHelper.Query);
//          ACommonRestIntfItem:=TCommonRestIntfItem.Create();
//          ACommonRestIntfItem.LoadFromJson(ASuperObject);
//          if not ACommonRestIntfItem.IsEmpty then
//          begin
//              if not ACommonRestIntfItem.DoPrepareStart(ATempError) then
//              begin
//                AError:=AError+ATempError+#13#10;
//                Result:=False;
//              end
//              else
//              begin
//                Self.IntfList.Add(ACommonRestIntfItem);
//              end;
//          end;
//
//          ASQLDBHelper.Query.Next;
//        end;
//    end;
//
//  finally
//    CommonRestServiceModule.DBModule.FreeDBHelperToPool(ASQLDBHelper);
//  end;


end;

function TCommonRestServiceModule.DoPrepareStop: Boolean;
var
  I: Integer;
begin

  if GlobalCommonRestIntf_ASyncCallTaskManager<>nil then
  begin
    GlobalCommonRestIntf_ASyncCallTaskManager.StopTaskList;
    FreeAndNil(GlobalCommonRestIntf_ASyncCallTaskManager);
  end;

  for I := 0 to IntfList.Count-1 do
  begin
    Result:=Result and IntfList[I].DoPrepareStop;
  end;

  {$IFDEF USE_IDHTTPSERVERMODE}
  {$ELSE}
  Result:=Inherited;
  {$ENDIF}

end;

//function TCommonRestServiceModule.GetFieldList(ARestName:String;ASQLDBHelper: TBaseDBHelper;
//  var ACode: Integer; var ADesc: String; var ADataJson: ISuperObject): Boolean;
//var
//  ATableItem:TCommonRestIntfItem;
//begin
//  ACode:=FAIL;
//  ADesc:='';
//  ADataJson:=nil;
//
//  Result:=False;
//
//
//
//
//  ATableItem:=nil;
//
//  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
//
//
//  if (ATableItem=nil) then
//  begin
//    ADesc:=('不存在'+ARestName+'服务');
//    Exit;
//  end;
//
//
//
//  //查询字段列表
//  if ATableItem<>nil then
//  begin
//    Result:=ATableItem.GetFieldList(
//          ATableItem.DBModule,
//          ASQLDBHelper,
//          ACode,
//          ADesc,
//          ADataJson
//          );
//  end;
//
//
//end;

function TCommonRestServiceModule.GetRecord(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:String;
  AWhereKeyJson,
  ACustomConditionSQL: String;
  ARecordDataJsonStr:String;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject;
  AIsMustExist:Boolean;
  AIsNeedSubQueryList:Integer): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;

  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);

  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Exit;
  end;


  //查询记录
  Result:=ATableItem.GetRecord(
                      ATableItem.DBModule,
                      ASQLDBHelper,
                      AAppID,
                      AWhereKeyJson,
                      ACustomConditionSQL,
                      ARecordDataJsonStr,
                      ACode,
                      ADesc,
                      ADataJson,
                      AIsMustExist,
                      AIsNeedSubQueryList
                      );


end;

function TCommonRestServiceModule.GetRecordList(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:String;
  APageIndex, APageSize: Integer;
  AWhereKeyJson, AOrderBy,
  ACustomConditionSQL: String;
  AIsNeedSumCount: Integer;
  ARecordDataJsonStr:String;
  AIsNeedSubQueryList:Integer;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject;
  AMasterRecordJson:ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);

  if (ATableItem=nil) then
  begin
    ADesc:=('不存在'+ARestName+'服务');
    Exit;
  end;



  //查询记录列表
  if ATableItem<>nil then
  begin
    Result:=ATableItem.GetRecordList(
              ATableItem.DBModule,
              ASQLDBHelper,
              AAppID,
              APageIndex,
              APageSize,
              AWhereKeyJson,
              AOrderBy,
              ACustomConditionSQL,
              1,
              0,
              '',
              AIsNeedSubQueryList,
              ACode,
              ADesc,
              ADataJson,
              AMasterRecordJson
              );
  end;

end;

function TCommonRestServiceModule.IntfList: TCommonRestIntfList;
begin
  Result:=GlobalCommonRestIntfList;
end;

//function TCommonRestServiceModule.RealDeleteRecord(ARestName:String;
//  ASQLDBHelper: TBaseDBHelper;
//  AAppID:String;
//  AWhereKeyJson, ACustomConditionSQL: String;
//  var ACode: Integer;
//  var ADesc: String;
//  var ADataJson: ISuperObject): Boolean;
//var
//  ATableItem:TCommonRestIntfItem;
//begin
//  ACode:=FAIL;
//  ADesc:='';
//  ADataJson:=nil;
//
//  Result:=False;
//
//
//
//  ATableItem:=nil;
//
//  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
//  if ATableItem=nil then
//  begin
//    ADesc:=('不存在'+ARestName+'服务');
//    Exit;
//  end;
//
//
//  //真删除记录
//  Result:=ATableItem.RealDeleteRecord(
//        ATableItem.DBModule,
//        ASQLDBHelper,
//        AAppID,
//        AWhereKeyJson,
//        ACustomConditionSQL,
//        ACode,
//        ADesc,
//        ADataJson
//        );
//
//end;

//function TCommonRestServiceModule.UpdateRecord(ARestName:String;
//  ASQLDBHelper: TBaseDBHelper;
//  AAppID:String;
//  ARecordDataJson: ISuperObject; AWhereKeyJson, ACustomConditionSQL: String;
//  var ACode: Integer; var ADesc: String; var ADataJson: ISuperObject): Boolean;
//var
//  ATableItem:TCommonRestIntfItem;
//begin
//  ACode:=FAIL;
//  ADesc:='';
//  ADataJson:=nil;
//
//  Result:=False;
//
//
//
//  ATableItem:=nil;
//
//  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
//  if ATableItem=nil then
//  begin
//    ADesc:=('不存在'+ARestName+'服务');
//    Exit;
//  end;
//
//
//  //修改记录
//  Result:=ATableItem.UpdateRecord(
//                    ATableItem.DBModule,
//                    ASQLDBHelper,
//                    AAppID,
//                    ARecordDataJson,
//                    AWhereKeyJson,
//                    ACustomConditionSQL,
//                    ACode,
//                    ADesc,
//                    ADataJson
//                    );
//end;




var
  AIntfItem:TCommonRestIntfItem;


initialization

  {$IFDEF USE_IDHTTPSERVERMODE}
  {$ELSE}
  TkbmMWRTTI.EnableRTTI(TsrvTableCommonRestService);
  {$ENDIF}

  //服务模块
  CommonRestServiceModule:=TCommonRestServiceModule.Create();
  {$IFDEF USE_IDHTTPSERVERMODE}
  {$ELSE}
  CommonRestServiceModule.Name:='数据库表通用操作';
  //注册
  RegisterServiceModule(CommonRestServiceModule);
  {$ENDIF}









finalization
  FreeAndNil(CommonRestServiceModule);



end.