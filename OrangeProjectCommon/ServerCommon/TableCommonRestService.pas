unit TableCommonRestService;

// =========================================================================
// kbmMW - An advanced and extendable middleware framework.
// by Components4Developers (http://www.components4developers.com)
//
// Service generated by kbmMW service wizard.
//
// INSTRUCTIONS FOR REGISTRATION/USAGE
// -----------------------------------
// Please update the uses clause of the datamodule/form the TkbmMWServer is placed on by adding services unit name 
// to it. Eg.
//
//     uses ...,kbmMWServer,YourServiceUnitName;
// 
// Somewhere in your application, make sure to register the serviceclass to the TkbmMWServer instance.
// This can be done by registering the traditional way, or by using auto registration.
// 
// Traditional registration
// ------------------------
// var
//    sd:TkbmMWCustomServiceDefinition;
// ..
//    sd:=kbmMWServer1.RegisterService(yourserviceclassname,false);
// 
// Set the last parameter to true if this is the default service.
// 
// 
// Auto registration
// -----------------
// Make sure that your service class is tagged with the [kbmMW_Service] attribute.
// Then auto register all tagged services:
// ..
//    kbmMWServer1.AutoRegisterServices;
// 
// -----------------------------------------------



{$I kbmMW.inc}

interface

uses
  SysUtils,
{$ifdef LEVEL6}
  Variants,
{$else}
  Forms,
{$endif}
  Classes,
  DateUtils,
  Math,


  IniFiles,
  XSuperObject,
  XSuperJson,

  Forms,
  XMLDoc,
  XMLIntf,
  ActiveX,

//  uThumbCommon,
//  uDateCommon,
//  uCaptcha,
//  uCommonUtils,
  uDataSetToJson,
  uBaseDBHelper,
  uUniDBHelper,
  uFuncCommon,
  uLang,

  uRestInterfaceCall,
  Redis.Commons,
  Redis.Client,

//  uOpenCommon,

  uTableCommonRestCenter,
  uOpenPlatformServerManager,

  kbmMWHTTPStdTransStream,
  kbmMWCustomHTTPSmartService,

  kbmMWSecurity,
  kbmMWServer,
  kbmMWServiceUtils,
  kbmMWGlobal,
  kbmMWCustomSmartService
   ,kbmMWRTTI
   ,kbmMWSmartServiceUtils;


type
  [kbmMW_Service('name:tablecommonrest, flags:[listed]')]
  [kbmMW_Rest('path:/tablecommonrest')]
  // Access to the service can be limited using the [kbmMW_Auth..] attribute.
  // [kbmMW_Auth('role:[SomeRole,SomeOtherRole], grant:true')]

  TsrvTableCommonRestService = class(TkbmMWCustomHTTPSmartService)
    procedure kbmMWCustomHTTPSmartServiceCORS(Sender: TObject;
      const ARequestHelper, AResponseHelper: TkbmMWHTTPTransportStreamHelper;
      const AOrigin: string; var AAllowedOrigins, AAllowedMethods,
      AAllowedHeaders: string);

     { Private declarations }
  protected
     { Protected declarations }
  public
     { Public declarations }
     // HelloWorld function callable from both a regular client,
     // due to the optional [kbmMW_Method] attribute,
     // and from a REST client due to the optional [kbmMW_Rest] attribute.
     // The access path to the function from a REST client (like a browser)+
     // is in this case relative to the services path.
     // In this example: http://.../xalionservice/helloworld
     // Access to the function can be limited using the [kbmMW_Auth..] attribute.
     // [kbmMW_Auth('role:[SomeRole,SomeOtherRole], grant:true')]

     //http://127.0.0.1:9000/easyservice/helloworld
     //http://127.0.0.1:9000/easyservice/echostring/abc
     //http://127.0.0.1:9000/easyservice/cal/addnumbers?arg1=1&arg2=2
     //http://127.0.0.1:9000/easyservice/send_register_captcha?phone=18957901025
     //http://127.0.0.1:9000/easyservice/register_user?appid=1001&phone=18957901025&captcha=2721&name=ggggcexx&password=123456&repassword=123456


     //加了[kbmMW_Method]属性的方法才会被访问到
     //[kbmMW_Rest].method表示访问所使用的方法
     //[kbmMW_Rest].path表示访问的路径,可以有别名
     [kbmMW_Rest('method:get, path:helloworld')]
     [kbmMW_Method]
     function HelloWorld:String;


     //回应输入的串
     [kbmMW_Method('EchoString')]
     [kbmMW_Rest('method:get, path: [ "echostring/{AString}","myechostring/{AString}" ]')]
     [kbmMW_Auth('role:[SomeRole,SomeOtherRole], grant:true')]
     function EchoString([kbmMW_Rest('value: "{AString}"')] const AString:String):String;


     [kbmMW_Method]
     [kbmMW_Rest('method:get, path: "cal/addnumbers"')]
     function AddNumbers([kbmMW_Rest('value: "$arg1", required: true')] const AValue1:Integer;
                         [kbmMW_Rest('value: "$arg2", required: true')] const AValue2:Integer;
                         [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):Integer;

    public

      {$REGION '记录'}
      //添加记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "add_record"')]
      function AddRecord([kbmMW_Rest('value: "$appid", required: true')] const AAppID:Integer;
                 [kbmMW_Rest('value: "$user_fid", required: true')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: true')] const ARestName:String;
                 [kbmMW_Rest('value: "$record_data_json", required: true')] const ARecordDataJson:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //添加记录
      [kbmMW_Method]
      [kbmMW_Rest('method:post, path: "add_record_post"')]
      function AddRecordPost([kbmMW_Rest('value: "$appid", required: true')] const AAppID:Integer;
                 [kbmMW_Rest('value: "$user_fid", required: true')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: true')] const ARestName:String;
                 [kbmMW_Rest('value: "$body", required: true')] const ARecordDataJson:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //修改记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "update_record"')]
      function UpdateRecord([kbmMW_Rest('value: "$appid", required: true')] const AAppID:Integer;
                 [kbmMW_Rest('value: "$user_fid", required: true')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: true')] const ARestName:String;
                 [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                 [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                 [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;
      //修改记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "update_record_list"')]
      function UpdateRecordList([kbmMW_Rest('value: "$appid", required: true')] const AAppID:Integer;
                 [kbmMW_Rest('value: "$user_fid", required: true')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: true')] const ARestName:String;
                 [kbmMW_Rest('value: "$record_data_json_array", required: true')] const ARecordDataJsonArray:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;



      //删除记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "del_record"')]
      function DelRecord([kbmMW_Rest('value: "$appid", required: true')] const AAppID:Integer;
                 [kbmMW_Rest('value: "$user_fid", required: true')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: true')] const ARestName:String;
                 [kbmMW_Rest('value: "$where_key_json", required: true')] const AWhereKeyJson:String;
                 [kbmMW_Rest('value: "$where_sql", required: true')] const ACustomConditionSQL:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //删除记录列表
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "del_record_list"')]
      function DelRecordList([kbmMW_Rest('value: "$appid", required: true')] const AAppID:Integer;
                 [kbmMW_Rest('value: "$user_fid", required: true')] const AUserFID:String;
                 [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                 [kbmMW_Rest('value: "$rest_name", required: true')] const ARestName:String;
                 [kbmMW_Rest('value: "$where_json_array", required: true')] const AWhereJsonArray:String;
                 [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //获取记录列表
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "get_record_list"')]
      function GetRecordList([kbmMW_Rest('value: "$appid", required: true')] const AAppID:Integer;
                [kbmMW_Rest('value: "$user_fid", required: true')] const AUserFID:String;
                [kbmMW_Rest('value: "$key", required: true')] const AKey:String;
                [kbmMW_Rest('value: "$pageindex", required: true')] const APageIndex:Integer;
                [kbmMW_Rest('value: "$pagesize", required: true')] const APageSize:Integer;
                [kbmMW_Rest('value: "$rest_name", required: true')] const ARestName:String;
                [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                [kbmMW_Rest('value: "$order_by", required: false')] const AOrderBy:String;
                [kbmMW_Rest('value: "$is_need_return_level", required: false')] const AIsNeedReturnLevel:String;
                [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                [kbmMW_Rest('value: "$is_need_sub_query_list", required: false')] const AIsNeedSubQueryList:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //获取记录
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "get_record"')]
      function GetRecord([kbmMW_Rest('value: "$appid", required: true')] const AAppID:Integer;
                [kbmMW_Rest('value: "$user_fid", required: true')] const AUserFID:String;
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$rest_name", required: true')] const ARestName:String;
                [kbmMW_Rest('value: "$where_key_json", required: false')] const AWhereKeyJson:String;
                [kbmMW_Rest('value: "$where_sql", required: false')] const ACustomConditionSQL:String;
                [kbmMW_Rest('value: "$record_data_json", required: false')] const ARecordDataJson:String;
                [kbmMW_Rest('value: "$is_must_exist", required: false')] const AIsMustExist:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;

      //获取字段列表
      [kbmMW_Method]
      [kbmMW_Rest('method:get, path: "get_field_list"')]
      function GetFieldList([kbmMW_Rest('value: "$appid", required: true')] const AAppID:Integer;
                [kbmMW_Rest('value: "$user_fid", required: true')] const AUserFID:String;
                [kbmMW_Rest('value: "$key", required: false')] const AKey:String;
                [kbmMW_Rest('value: "$rest_name", required: true')] const ARestName:String;
                [kbmMW_Arg(mwatRemoteLocation)] const ARemoteLocation:String):String;


    {$ENDREGION}


    public
      function ProcessRequest(const Func:string; const ClientIdent:TkbmMWClientIdentity; const Args:array of Variant):Variant; override;
  end;





  TCommonRestServiceModule=class(TKbmMWServiceModule)
  public
    //表服务列表
    IntfList:TCommonRestIntfList;
  public
    constructor Create; override;
    destructor Destroy; override;
  public
    //准备启动
    function DoPrepareStart(var AError:String): Boolean; override;
    //准备停止
    function DoPrepareStop: Boolean; override;
  public
    function GetIntf(ARestName:String;
                            var AIntfItem:TCommonRestIntfItem;
                            var ADesc:String):Boolean;
  public
    //添加一条记录
    function AddRecord(ARestName:String;
                        ASQLDBHelper:TBaseDBHelper;
                        AAppID:Integer;
                        ARecordDataJson:ISuperObject;
                        var ACode:Integer;
                        var ADesc:String;
                        var ADataJson:ISuperObject
                        ):Boolean;
    //添加记录列表
    function AddRecordList(ARestName:String;
                        ASQLDBHelper:TBaseDBHelper;
                        AAppID:Integer;
                        ARecordDataJsonArray:ISuperArray;
                        var ACode:Integer;
                        var ADesc:String;
                        var ADataJson:ISuperObject
                        ):Boolean;
    //修改一条记录
    function UpdateRecord(ARestName:String;
                          ASQLDBHelper:TBaseDBHelper;
                          AAppID:Integer;
                          ARecordDataJson:ISuperObject;
                          //更新条件数组,Json数组
                          AWhereKeyJson:String;
                          //自带的Where条件,如  AND (1=1),可以不使用AWhereKeyJson
                          ACustomConditionSQL:String;
                          var ACode:Integer;
                          var ADesc:String;
                          var ADataJson:ISuperObject
                          ):Boolean;
    //获取记录列表
    function GetRecordList(ARestName:String;
                          ASQLDBHelper:TBaseDBHelper;
                          AAppID:Integer;
                           APageIndex:Integer;
                           APageSize:Integer;
                           //查询条件,Json数组
                           AWhereKeyJson:String;
                           //排序
                           AOrderBy:String;
                           //自带的Where条件,如 AND (1=1),可以不使用AWhereKeyJson
                           ACustomConditionSQL:String;
                           //是否需要总数
                           AIsNeedSumCount:Integer;
                           //参数
                           ARecordDataJsonStr:String;
                           //需要子查询
                           AIsNeedSubQueryList:Integer;
                           var ACode:Integer;
                           var ADesc:String;
                           var ADataJson:ISuperObject;
                           AMasterRecordJson:ISuperObject=nil
                           ):Boolean;
    //获取记录
    function GetRecord(ARestName:String;
                        ASQLDBHelper:TBaseDBHelper;
                        AAppID:Integer;
                       //查询条件,Json数组
                       AWhereKeyJson:String;
                       //自带的Where条件,如 AND (1=1),可以不使用AWhereKeyJson
                       ACustomConditionSQL:String;
                       ARecordDataJsonStr:String;
                       var ACode:Integer;
                       var ADesc:String;
                       var ADataJson:ISuperObject;
                       AIsMustExist:Boolean=True;
                       //需要子查询
                       AIsNeedSubQueryList:Integer=1
                       ):Boolean;
    //获取字段列表
    function GetFieldList(ARestName:String;
                          ASQLDBHelper:TBaseDBHelper;
                           var ACode:Integer;
                           var ADesc:String;
                           var ADataJson:ISuperObject
                           ):Boolean;
    //真删一条记录
    function RealDeleteRecord(
                          ARestName:String;
                          ASQLDBHelper:TBaseDBHelper;
                          AAppID:Integer;
                          //删除条件数组,Json数组
                          AWhereKeyJson:String;
                          //自带的Where条件,如  AND (1=1),可以不使用AWhereKeyJson
                          ACustomConditionSQL:String;
                          var ACode:Integer;
                          var ADesc:String;
                          var ADataJson:ISuperObject
                          ):Boolean;
    //虚拟删除一条记录
    function DeleteRecord(
                          ARestName:String;
                          ASQLDBHelper:TBaseDBHelper;
                          AAppID:Integer;
                          //删除条件数组,Json数组
                          AWhereKeyJson:String;
                          //自带的Where条件,如  AND (1=1),可以不使用AWhereKeyJson
                          ACustomConditionSQL:String;
                          var ACode:Integer;
                          var ADesc:String;
                          var ADataJson:ISuperObject
                          ):Boolean;
  end;




var
  CommonRestServiceModule:TCommonRestServiceModule;


implementation


uses
  kbmMWExceptions;




{$R *.dfm}



{ TsrvTableCommonRestService }


function TsrvTableCommonRestService.AddRecord(const AAppID:Integer;const
  AUserFID: String; const AKey, ARestName, ARecordDataJson: String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;
var
//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;

  ARecordJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID=0 then
  begin
    ADesc:=Trans('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=Trans('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=Trans('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;



  ATableItem:=nil;
  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  try
//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=Trans(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;



    //插入新记录
    ARecordJson:=TSuperObject.Create(ARecordDataJson);
    ATableItem.AddRecord(ATableItem.DBModule,
                          nil,
                          AAppID,
                          ARecordJson,
                          nil,
                          ACode,
                          ADesc,
                          ADataJson);


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.AddRecordPost(const AAppID: Integer;
  const AUserFID, AKey, ARestName, ARecordDataJson, ARemoteLocation: String): String;
//var
//  AStringStream:TStringStream;
begin
//  AStringStream:=TStringStream.Create('',TEncoding.UTF8);
//  try
//    RequestStream.Position:=0;
//    AStringStream.LoadFromStream(RequestStream);
//
//    //AStringStream.DataString
//  finally
//    FreeAndNil(AStringStream);
//  end;

  Result:=AddRecord(AAppID,AUserFID,AKey,ARestName,ARecordDataJson,ARemoteLocation);
end;

function TsrvTableCommonRestService.AddNumbers(const AValue1, AValue2: Integer;
  const ARemoteLocation: String): Integer;
begin
  Result:=AValue1+AValue2;
end;

function TsrvTableCommonRestService.DelRecord(const AAppID:Integer;const
  AUserFID: String; const AKey: String;
  const ARestName,AWhereKeyJson, ACustomConditionSQL: String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID=0 then
  begin
    ADesc:=Trans('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=Trans('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;


  if ARestName='' then
  begin
    ADesc:=Trans('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if (AWhereKeyJson='') and (ACustomConditionSQL='') then
  begin
    ADesc:=Trans('条件不能同时为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  try


//    //接口验证员工是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=Trans(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;



    //删除记录
    ATableItem.DeleteRecord(
          ATableItem.DBModule,nil,
          AAppID,
          AWhereKeyJson,
          ACustomConditionSQL,
          ACode,
          ADesc,
          ADataJson
          );


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.DelRecordList(const AAppID:Integer;const
  AUserFID: String; const AKey, ARestName, AWhereJsonArray,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;

  AWhereJsonSuperArray:ISuperArray;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID=0 then
  begin
    ADesc:=Trans('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=Trans('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;


  if ARestName='' then
  begin
    ADesc:=Trans('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if (AWhereJsonArray='') then
  begin
    ADesc:=Trans('条件不能同时为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  try


//    //接口验证员工是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=Trans(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;


    AWhereJsonSuperArray:=TSuperArray.Create(AWhereJsonArray);

    //删除记录列表
    ATableItem.DeleteRecordList(
          ATableItem.DBModule,nil,
          AAppID,
          AWhereJsonSuperArray,
          ACode,
          ADesc,
          ADataJson
          );


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;


end;

function TsrvTableCommonRestService.EchoString(const AString: String): String;
begin
  Result:='你好！'+astring;
end;

function TsrvTableCommonRestService.GetFieldList(const AAppID:Integer;const
  AUserFID: String; const AKey, ARestName, ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID=0 then
  begin
    ADesc:=Trans('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=Trans('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=Trans('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;



  try

//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //用户身份合法
//    end
//    else
//    begin
//      ADesc:=Trans(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;




    //查询记录列表
    if ATableItem<>nil then
    begin
      ATableItem.GetFieldList(
            ATableItem.DBModule,
            nil,
            ACode,
            ADesc,
            ADataJson
            );
    end;



  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;
end;

function TsrvTableCommonRestService.GetRecordList(const AAppID:Integer;const
  AUserFID: String; const AKey:String;
  const APageIndex,APageSize:Integer;
  const ARestName,AWhereKeyJson, ACustomConditionSQL, AOrderBy:String;
  const AIsNeedReturnLevel:String;
  const ARecordDataJson:String;
  const AIsNeedSubQueryList:String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AUserType:Integer;
  ATableItem:TCommonRestIntfItem;
begin


  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID=0 then
  begin
    ADesc:=Trans('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=Trans('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=Trans('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;



  try

//    //接口验证用户是否合法
//    //获取用户类型
//    if not GlobalServiceProject.GetUserType(
//              AAppID,
//              AUserFID,
//              AKey,
//              ACode,
//              ADesc,
//              ADataJson,
//              AUserType
//              ) then
//    begin
//      Exit;
//    end;



    //查询记录列表
    if ATableItem<>nil then
    begin

//        //检测用户类型的查询条件
//        if ATableItem.QueryUserTypeConditions.Count>0 then
//        begin
//          //需要检测用户类型是否存在条件,如果不存在条件需要提示出来
//          if not ATableItem.CheckQueryUserTypeCondition(AUserType,AWhereKeyJson,ADesc) then
//          begin
//            Exit;
//          end;
//        end;



        ATableItem.GetRecordList(
              ATableItem.DBModule,
              nil,
              AAppID,
              APageIndex,
              APageSize,
              AWhereKeyJson,
              AOrderBy,
              ACustomConditionSQL,
              1,//需要返回sum_count
              Ord(AIsNeedReturnLevel='1'),//是否需要返回层级Level
              ARecordDataJson,
              Ord(AIsNeedSubQueryList='1'),
              ACode,
              ADesc,
              ADataJson
              );
    end;


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.GetRecord(const AAppID:Integer;const
  AUserFID: String; const AKey:String;
  const ARestName,AWhereKeyJson, ACustomConditionSQL,
  ARecordDataJson,AIsMustExist,
  ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;

  ATableItem:TCommonRestIntfItem;
  ARedisClient:TRedisClient;
  ARedisValue:String;
  ASuperArray:ISuperArray;
begin


  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID=0 then
  begin
    ADesc:=Trans('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=Trans('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=Trans('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;
  ARedisClient:=GlobalServiceProject.GetRedisClient;
  try

//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //用户身份合法
//    end
//    else
//    begin
//      ADesc:=Trans(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;




    //查询记录列表
    if ATableItem<>nil then
    begin


      //判断下有没有缓存
      if

          //取缓存失败
          not ARedisClient.GET(IntToStr(AAppID)+'_'+'get_record'+'_'+ARestName+'_'+AWhereKeyJson,ARedisValue)
          then
      begin



          ATableItem.GetRecord(
                      ATableItem.DBModule,
                      nil,
                      AAppID,
                      AWhereKeyJson,
                      ACustomConditionSQL,
                      ARecordDataJson,
                      ACode,
                      ADesc,
                      ADataJson,
                      (AIsMustExist<>'0')//默认为空,为1,表示是必须存在的
                      );



          //设置缓存,10分钟过期
          ARedisClient.&Set(IntToStr(AAppID)+'_'+'get_record'+'_'+ARestName+'_'+AWhereKeyJson,ADataJson.AsJSON,REDIS_COMMON_TIMEOUT);

      end
      else
      begin

          //有缓存
          ADataJson:=TSuperObject.Create(ARedisValue);
          ACode:=SUCC;

      end;




    end;


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;

    GlobalServiceProject.FreeRedisClient(ARedisClient);
  end;

end;

//function TsrvTableCommonRestService.QueryRecordList(const AAppID:Integer;const
//  AUserFID: String; const AKey:String;
//  const APageIndex,APageSize:Integer;
//  const ARestName,AWhereKeyJson,AOrderBy,
//  ARemoteLocation: String): String;
//var
//  ACode:Integer;
//  ADesc:String;
//  ADataJson:ISuperObject;
//
//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
//  ATableItem:TQueryCommonRestServerItem;
//begin
//
//
//  ACode:=FAIL;
//  ADesc:='';
//  ADataJson:=nil;
//
//
//  if AAppID=0 then
//  begin
//    ADesc:=Trans('AppID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;
//
//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=Trans('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;
//
//  if ARestName='' then
//  begin
//    ADesc:=Trans('RestName不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;
//
//
//  ATableItem:=nil;
//  AQueryItem:=nil;
//
//  ATableItem:=CommonRestServiceModule.QueryList.Find(ARestName);
//  if ATableItem=nil then
//  begin
//    ADesc:=Trans('不存在'+ARestName+'服务');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;
//
//
//
//  try
//
//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //用户身份合法
//    end
//    else
//    begin
//      ADesc:=Trans(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;
//
//
//    //查询记录列表
//    ATableItem.GetRecordList(
//          nil,
//          APageIndex,
//          APageSize,
//          AWhereKeyJson,
//          AOrderBy,
//          '',
//          1,
//          ACode,
//          ADesc,
//          ADataJson
//          );
//
//
//  finally
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//  end;
//
//end;

function TsrvTableCommonRestService.HelloWorld: String;
begin
  Result:='Hello world';
end;

procedure TsrvTableCommonRestService.kbmMWCustomHTTPSmartServiceCORS(
  Sender: TObject; const ARequestHelper,
  AResponseHelper: TkbmMWHTTPTransportStreamHelper; const AOrigin: string;
  var AAllowedOrigins, AAllowedMethods, AAllowedHeaders: string);
begin
  AAllowedMethods:='GET' ;
  AAllowedOrigins:='*';//'http://127.0.0.1';
  AAllowedHeaders:= 'x-requested-with';
end;

function TsrvTableCommonRestService.ProcessRequest(const Func: string;
  const ClientIdent: TkbmMWClientIdentity;
  const Args: array of Variant): Variant;
var
  ADesc:String;
begin

  ProcessCORSRequest;

  if length(Args)>2 then
  begin

    //验签
    //取到appid,获取到appsecret,再验签,appid放在列表中,每次服务器启动时获取签名
    if not GlobalServiceProject.CheckInterfaceSign(Args[0],Args[2],ADesc) then
    begin
      Result:=ReturnJson(FAIL,ADesc,nil).AsJSON;
      Exit;
    end;

  end;


  Result:=Inherited;


end;

function TsrvTableCommonRestService.UpdateRecord(const AAppID:Integer;const
  AUserFID: String; const AKey: String; const ARestName,
  ARecordDataJson, AWhereKeyJson, ACustomConditionSQL: String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;
  ARecordJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID=0 then
  begin
    ADesc:=Trans('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=Trans('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=Trans('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if ARecordDataJson='' then
  begin
    ADesc:=Trans('RecordDataJson不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if (AWhereKeyJson='') and (ACustomConditionSQL='') then
  begin
    ADesc:=Trans('条件不能同时为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;




  try


//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=Trans(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;



    //修改记录
    ARecordJson:=TSuperObject.Create(ARecordDataJson);
    ATableItem.UpdateRecord(
                      ATableItem.DBModule,
                      nil,
                      AAppID,
                      ARecordJson,
                      AWhereKeyJson,
                      ACustomConditionSQL,
                      ACode,
                      ADesc,
                      ADataJson
                      );


  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;

function TsrvTableCommonRestService.UpdateRecordList(const AAppID:Integer;const
  AUserFID: String; const AKey: String; const ARestName,
  ARecordDataJsonArray: String;
  const ARemoteLocation: String): String;
var
  ACode:Integer;
  ADesc:String;
  ADataJson:ISuperObject;

//  AHttpResponse:String;
//  AHttpResponseJson:ISuperObject;

  ARecordJsonArray:ISuperArray;
  ARecordJson:ISuperObject;
  ATableItem:TCommonRestIntfItem;
  I: Integer;
begin

  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;


  if AAppID=0 then
  begin
    ADesc:=Trans('AppID不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

//  if (Trim(AUserFID)='') or (Trim(AUserFID)='0') then
//  begin
//    ADesc:=Trans('UserFID不能为空');
//    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
//    Exit;
//  end;

  if ARestName='' then
  begin
    ADesc:=Trans('RestName不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;

  if ARecordDataJsonArray='' then
  begin
    ADesc:=Trans('RecordDataJsonArray不能为空');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
    Exit;
  end;




  try


//    //接口验证用户是否合法
//    AHttpResponse:=SimpleCallAPI(GlobalServiceProject.IsValidUserRestUrl,
//                                nil,
//                                '',
//                                ['appid',
//                                'user_fid',
//                                'key'],
//                                [AAppID,
//                                AUserFID,
//                                AKey],
//                      GlobalServiceProject.GetAppSignType(AAppID),
//                      GlobalServiceProject.GetAppSecret(AAppID)
//                                );
//    AHttpResponseJson:=TSuperObject.Create(AHttpResponse);
//
//    if AHttpResponseJson.I['Code']=SUCC then
//    begin
//      //员工身份合法
//    end
//    else
//    begin
//      ADesc:=Trans(AHttpResponseJson.S['Desc']);
//      Exit;
//    end;



    //批量修改记录
    ARecordJsonArray:=TSuperArray.Create(ARecordDataJsonArray);
    for I := 0 to ARecordJsonArray.Length-1 do
    begin
      ARecordJson:=ARecordJsonArray.O[I];
      if not ATableItem.UpdateRecord(
                        ATableItem.DBModule,
                        nil,
                        AAppID,
                        ARecordJson.O['record_data_json'],
                        ARecordJson.S['where_key_json'],
                        ARecordJson.S['where_sql'],
                        ACode,
                        ADesc,
                        ADataJson
                        ) then
      begin
        Exit;
      end;
    end;


    ACode:=SUCC;
    ADesc:=Trans('批量编辑成功');

  finally
    Result:=ReturnJson(ACode,ADesc,ADataJson).AsJSON;
  end;

end;




{ TCommonRestServiceModule }

function TCommonRestServiceModule.AddRecord(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:Integer;
  ARecordDataJson: ISuperObject;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;



  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Exit;
  end;


  //插入新记录
  Result:=ATableItem.AddRecord(
                              ATableItem.DBModule,
                              ASQLDBHelper,
                              AAppID,
                              ARecordDataJson,
                              nil,
                              ACode,
                              ADesc,
                              ADataJson);

end;

function TCommonRestServiceModule.AddRecordList(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:Integer;
  ARecordDataJsonArray: ISuperArray;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;



  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Exit;
  end;


  //插入记录列表
  Result:=ATableItem.AddRecordList(
                        ATableItem.DBModule,
                        ASQLDBHelper,
                        AAppID,
                        ARecordDataJsonArray,
                        nil,
                        ACode,
                        ADesc,
                        ADataJson);

end;

function TCommonRestServiceModule.GetIntf(ARestName: String;
  var AIntfItem:TCommonRestIntfItem;
  var ADesc: String): Boolean;
begin
  Result:=False;
  AIntfItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if AIntfItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Exit;
  end;
  Result:=True;
end;

constructor TCommonRestServiceModule.Create;
begin
  inherited;

  IntfList:=TCommonRestIntfList.Create;

end;

function TCommonRestServiceModule.DeleteRecord(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:Integer;
  AWhereKeyJson, ACustomConditionSQL: String;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;



  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Exit;
  end;


  //删除记录
  Result:=ATableItem.DeleteRecord(
            ATableItem.DBModule,
            ASQLDBHelper,
            AAppID,
            AWhereKeyJson,
            ACustomConditionSQL,
            ACode,
            ADesc,
            ADataJson
            );

end;

destructor TCommonRestServiceModule.Destroy;
begin
  FreeAndNil(IntfList);
  inherited;
end;

function TCommonRestServiceModule.DoPrepareStart(var AError:String): Boolean;
//var
//  I: Integer;
//  ATempError:String;

//  ASuperObject:ISuperObject;
//  ASQLDBHelper:TBaseDBHelper;
//  ACommonRestIntfItem:TCommonRestIntfItem;
begin
  Result:=Inherited;



//  if not Result then Exit;
//
//
//  for I := 0 to IntfList.Count-1 do
//  begin
//    ATempError:='';
//    if not IntfList[I].DoPrepareStart(ATempError) then
//    begin
//      AError:=AError+ATempError+#13#10;
//      Result:=False;
//    end;
//  end;



//  //从数据库读取页面的接口列表
//  if not CommonRestServiceModule.DBModule.GetDBHelperFromPool(ASQLDBHelper,AError) then
//  begin
//    Exit;
//  end;
//  try
//    if ASQLDBHelper.SelfQuery('SELECT * FROM tbldata_interface WHERE type=''table_common_rest'' AND db_hostname<>'''' ',
//                                  [],[],asoOpen) then
//    begin
//        while not ASQLDBHelper.Query.Eof do
//        begin
//          ATempError:='';
//
//          ASuperObject:=JSonFromRecord(ASQLDBHelper.Query);
//          ACommonRestIntfItem:=TCommonRestIntfItem.Create();
//          ACommonRestIntfItem.LoadFromJson(ASuperObject);
//          if not ACommonRestIntfItem.IsEmpty then
//          begin
//              if not ACommonRestIntfItem.DoPrepareStart(ATempError) then
//              begin
//                AError:=AError+ATempError+#13#10;
//                Result:=False;
//              end
//              else
//              begin
//                Self.IntfList.Add(ACommonRestIntfItem);
//              end;
//          end;
//
//          ASQLDBHelper.Query.Next;
//        end;
//    end;
//
//  finally
//    CommonRestServiceModule.DBModule.FreeDBHelperToPool(ASQLDBHelper);
//  end;


end;

function TCommonRestServiceModule.DoPrepareStop: Boolean;
var
  I: Integer;
begin
  Result:=Inherited;

  for I := 0 to IntfList.Count-1 do
  begin
    Result:=Result and IntfList[I].DoPrepareStop;
  end;

end;

function TCommonRestServiceModule.GetFieldList(ARestName:String;ASQLDBHelper: TBaseDBHelper;
  var ACode: Integer; var ADesc: String; var ADataJson: ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;




  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);


  if (ATableItem=nil) then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Exit;
  end;



  //查询字段列表
  if ATableItem<>nil then
  begin
    Result:=ATableItem.GetFieldList(
          ATableItem.DBModule,
          ASQLDBHelper,
          ACode,
          ADesc,
          ADataJson
          );
  end;


end;

function TCommonRestServiceModule.GetRecord(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:Integer;
  AWhereKeyJson,
  ACustomConditionSQL: String;
  ARecordDataJsonStr:String;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject;
  AIsMustExist:Boolean;
  AIsNeedSubQueryList:Integer): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;

  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);

  if (ATableItem=nil) then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Exit;
  end;


  //查询记录
  Result:=ATableItem.GetRecord(
                      ATableItem.DBModule,
                      ASQLDBHelper,
                      AAppID,
                      AWhereKeyJson,
                      ACustomConditionSQL,
                      ARecordDataJsonStr,
                      ACode,
                      ADesc,
                      ADataJson,
                      AIsMustExist,
                      AIsNeedSubQueryList
                      );


end;

function TCommonRestServiceModule.GetRecordList(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:Integer;
  APageIndex, APageSize: Integer;
  AWhereKeyJson, AOrderBy,
  ACustomConditionSQL: String;
  AIsNeedSumCount: Integer;
  ARecordDataJsonStr:String;
  AIsNeedSubQueryList:Integer;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject;
  AMasterRecordJson:ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;


  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);

  if (ATableItem=nil) then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Exit;
  end;



  //查询记录列表
  if ATableItem<>nil then
  begin
    Result:=ATableItem.GetRecordList(
              ATableItem.DBModule,
              ASQLDBHelper,
              AAppID,
              APageIndex,
              APageSize,
              AWhereKeyJson,
              AOrderBy,
              ACustomConditionSQL,
              1,
              0,
              '',
              AIsNeedSubQueryList,
              ACode,
              ADesc,
              ADataJson,
              AMasterRecordJson
              );
  end;

end;

function TCommonRestServiceModule.RealDeleteRecord(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:Integer;
  AWhereKeyJson, ACustomConditionSQL: String;
  var ACode: Integer;
  var ADesc: String;
  var ADataJson: ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;



  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Exit;
  end;


  //真删除记录
  Result:=ATableItem.RealDeleteRecord(
        ATableItem.DBModule,
        ASQLDBHelper,
        AAppID,
        AWhereKeyJson,
        ACustomConditionSQL,
        ACode,
        ADesc,
        ADataJson
        );

end;

function TCommonRestServiceModule.UpdateRecord(ARestName:String;
  ASQLDBHelper: TBaseDBHelper;
  AAppID:Integer;
  ARecordDataJson: ISuperObject; AWhereKeyJson, ACustomConditionSQL: String;
  var ACode: Integer; var ADesc: String; var ADataJson: ISuperObject): Boolean;
var
  ATableItem:TCommonRestIntfItem;
begin
  ACode:=FAIL;
  ADesc:='';
  ADataJson:=nil;

  Result:=False;



  ATableItem:=nil;

  ATableItem:=CommonRestServiceModule.IntfList.Find(ARestName);
  if ATableItem=nil then
  begin
    ADesc:=Trans('不存在'+ARestName+'服务');
    Exit;
  end;


  //修改记录
  Result:=ATableItem.UpdateRecord(
                    ATableItem.DBModule,
                    ASQLDBHelper,
                    AAppID,
                    ARecordDataJson,
                    AWhereKeyJson,
                    ACustomConditionSQL,
                    ACode,
                    ADesc,
                    ADataJson
                    );
end;




var
  AIntfItem:TCommonRestIntfItem;


initialization
  TkbmMWRTTI.EnableRTTI(TsrvTableCommonRestService);

  //服务模块
  CommonRestServiceModule:=TCommonRestServiceModule.Create();
  CommonRestServiceModule.Name:='数据库表通用操作';
  //注册
  RegisterServiceModule(CommonRestServiceModule);









finalization
  FreeAndNil(CommonRestServiceModule);



end.